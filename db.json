{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next-reloaded/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/go基础数据类型.md","hash":"8baa1a3f82b65025a8f32734c25035fa0323d29d","modified":1615028293000},{"_id":"source/_posts/protobuf入门.md","hash":"e0c808a0436fbe424e8362f9a8515f265c03dedd","modified":1660898108937},{"_id":"source/_posts/hello-world.md","hash":"eced0e86a3492b3d3abce81f17b849120b787b41","modified":1615028293000},{"_id":"source/tags/index.md","hash":"49435ad2a41e6bba9e134450a87ec964938f0c30","modified":1615028293000},{"_id":"themes/next-reloaded/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1660896772177},{"_id":"themes/next-reloaded/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1660896772177},{"_id":"themes/next-reloaded/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1660896772177},{"_id":"themes/next-reloaded/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1660896772179},{"_id":"themes/next-reloaded/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1660896772179},{"_id":"themes/next-reloaded/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1660896772179},{"_id":"themes/next-reloaded/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1660896772179},{"_id":"themes/next-reloaded/_config.yml","hash":"7b99ff0906e7da7bacf721e93d0532c05d12973b","modified":1660897428309},{"_id":"themes/next-reloaded/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1660896772179},{"_id":"themes/next-reloaded/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1660896772180},{"_id":"themes/next-reloaded/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1660896772182},{"_id":"themes/next-reloaded/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1660896772189},{"_id":"themes/next-reloaded/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1660896772178},{"_id":"themes/next-reloaded/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1660896772178},{"_id":"themes/next-reloaded/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1660896772178},{"_id":"themes/next-reloaded/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1660896772178},{"_id":"themes/next-reloaded/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1660896772179},{"_id":"themes/next-reloaded/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1660896772178},{"_id":"themes/next-reloaded/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1660896772178},{"_id":"themes/next-reloaded/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1660896772179},{"_id":"themes/next-reloaded/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1660896772179},{"_id":"themes/next-reloaded/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1660896772179},{"_id":"themes/next-reloaded/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1660896772180},{"_id":"themes/next-reloaded/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1660896772180},{"_id":"themes/next-reloaded/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1660896772180},{"_id":"themes/next-reloaded/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1660896772180},{"_id":"themes/next-reloaded/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1660896772179},{"_id":"themes/next-reloaded/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1660896772180},{"_id":"themes/next-reloaded/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1660896772180},{"_id":"themes/next-reloaded/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1660896772180},{"_id":"themes/next-reloaded/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1660896772180},{"_id":"themes/next-reloaded/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1660896772182},{"_id":"themes/next-reloaded/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1660896772182},{"_id":"themes/next-reloaded/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1660896772182},{"_id":"themes/next-reloaded/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1660896772182},{"_id":"themes/next-reloaded/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1660896772180},{"_id":"themes/next-reloaded/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1660896772182},{"_id":"themes/next-reloaded/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1660896772182},{"_id":"themes/next-reloaded/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1660896772182},{"_id":"themes/next-reloaded/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1660896772182},{"_id":"themes/next-reloaded/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1660896772182},{"_id":"themes/next-reloaded/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1660896772183},{"_id":"themes/next-reloaded/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1660896772183},{"_id":"themes/next-reloaded/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1660896772183},{"_id":"themes/next-reloaded/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1660896772183},{"_id":"themes/next-reloaded/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1660896772183},{"_id":"themes/next-reloaded/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1660896772183},{"_id":"themes/next-reloaded/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1660896772183},{"_id":"themes/next-reloaded/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1660896772183},{"_id":"themes/next-reloaded/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1660896772183},{"_id":"themes/next-reloaded/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1660896772183},{"_id":"themes/next-reloaded/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1660896772184},{"_id":"themes/next-reloaded/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1660896772184},{"_id":"themes/next-reloaded/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1660896772184},{"_id":"themes/next-reloaded/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1660896772189},{"_id":"themes/next-reloaded/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1660896772189},{"_id":"themes/next-reloaded/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1660896772183},{"_id":"themes/next-reloaded/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1660896772189},{"_id":"themes/next-reloaded/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1660896772189},{"_id":"themes/next-reloaded/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1660896772189},{"_id":"themes/next-reloaded/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1660896772191},{"_id":"themes/next-reloaded/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1660896772189},{"_id":"themes/next-reloaded/source/404.html","hash":"4c586bdbdce093e2b8d39226e7a52d548b4d0259","modified":1660896772192},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1660896772178},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1660896772178},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1660896772178},{"_id":"themes/next-reloaded/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1660896772181},{"_id":"themes/next-reloaded/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1660896772181},{"_id":"themes/next-reloaded/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1660896772181},{"_id":"themes/next-reloaded/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1660896772181},{"_id":"themes/next-reloaded/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1660896772181},{"_id":"themes/next-reloaded/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1660896772181},{"_id":"themes/next-reloaded/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1660896772181},{"_id":"themes/next-reloaded/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1660896772181},{"_id":"themes/next-reloaded/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1660896772181},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1660896772178},{"_id":"themes/next-reloaded/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1660896772181},{"_id":"themes/next-reloaded/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1660896772182},{"_id":"themes/next-reloaded/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1660896772182},{"_id":"themes/next-reloaded/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1660896772182},{"_id":"themes/next-reloaded/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1660896772184},{"_id":"themes/next-reloaded/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1660896772184},{"_id":"themes/next-reloaded/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1660896772184},{"_id":"themes/next-reloaded/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1660896772184},{"_id":"themes/next-reloaded/layout/_partials/footer.swig","hash":"508a2b9b5ae9f2308f2da15a2698d405ca0f19fb","modified":1660898108949},{"_id":"themes/next-reloaded/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1660896772185},{"_id":"themes/next-reloaded/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1660896772185},{"_id":"themes/next-reloaded/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1660896772187},{"_id":"themes/next-reloaded/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1660896772188},{"_id":"themes/next-reloaded/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1660896772188},{"_id":"themes/next-reloaded/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1660896772188},{"_id":"themes/next-reloaded/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1660896772186},{"_id":"themes/next-reloaded/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1660896772186},{"_id":"themes/next-reloaded/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1660896772186},{"_id":"themes/next-reloaded/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1660896772186},{"_id":"themes/next-reloaded/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1660896772186},{"_id":"themes/next-reloaded/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1660896772190},{"_id":"themes/next-reloaded/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1660896772191},{"_id":"themes/next-reloaded/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1660896772191},{"_id":"themes/next-reloaded/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1660896772191},{"_id":"themes/next-reloaded/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1660896772191},{"_id":"themes/next-reloaded/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1660896772191},{"_id":"themes/next-reloaded/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1660896772191},{"_id":"themes/next-reloaded/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1660896772191},{"_id":"themes/next-reloaded/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1660896772191},{"_id":"themes/next-reloaded/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1660896772191},{"_id":"themes/next-reloaded/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1660896772191},{"_id":"themes/next-reloaded/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1660896772186},{"_id":"themes/next-reloaded/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1660896772192},{"_id":"themes/next-reloaded/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1660896772192},{"_id":"themes/next-reloaded/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1660896772192},{"_id":"themes/next-reloaded/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1660896772192},{"_id":"themes/next-reloaded/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1660896772191},{"_id":"themes/next-reloaded/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1660896772192},{"_id":"themes/next-reloaded/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1660896772192},{"_id":"themes/next-reloaded/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1660896772192},{"_id":"themes/next-reloaded/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1660896772192},{"_id":"themes/next-reloaded/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1660896772199},{"_id":"themes/next-reloaded/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1660896772199},{"_id":"themes/next-reloaded/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1660896772199},{"_id":"themes/next-reloaded/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1660896772199},{"_id":"themes/next-reloaded/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1660896772199},{"_id":"themes/next-reloaded/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1660896772200},{"_id":"themes/next-reloaded/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1660896772200},{"_id":"themes/next-reloaded/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1660896772199},{"_id":"themes/next-reloaded/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1660896772200},{"_id":"themes/next-reloaded/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1660896772200},{"_id":"themes/next-reloaded/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1660896772200},{"_id":"themes/next-reloaded/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1660896772200},{"_id":"themes/next-reloaded/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1660896772201},{"_id":"themes/next-reloaded/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1660896772200},{"_id":"themes/next-reloaded/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1660896772200},{"_id":"themes/next-reloaded/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1660896772200},{"_id":"themes/next-reloaded/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1660896772200},{"_id":"themes/next-reloaded/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1660896772200},{"_id":"themes/next-reloaded/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1660896772200},{"_id":"themes/next-reloaded/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1660896772201},{"_id":"themes/next-reloaded/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1660896772184},{"_id":"themes/next-reloaded/layout/_partials/head/head.swig","hash":"88ae469183e58836413df64e7a17fec1120387a1","modified":1660896772184},{"_id":"themes/next-reloaded/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1660896772199},{"_id":"themes/next-reloaded/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1660896772185},{"_id":"themes/next-reloaded/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1660896772185},{"_id":"themes/next-reloaded/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1660896772185},{"_id":"themes/next-reloaded/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1660896772197},{"_id":"themes/next-reloaded/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1660896772185},{"_id":"themes/next-reloaded/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1660896772192},{"_id":"themes/next-reloaded/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1660896772185},{"_id":"themes/next-reloaded/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1660896772185},{"_id":"themes/next-reloaded/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1660896772185},{"_id":"themes/next-reloaded/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1660896772185},{"_id":"themes/next-reloaded/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1660896772185},{"_id":"themes/next-reloaded/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1660896772185},{"_id":"themes/next-reloaded/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1660896772185},{"_id":"themes/next-reloaded/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1660896772186},{"_id":"themes/next-reloaded/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1660896772186},{"_id":"themes/next-reloaded/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1660896772186},{"_id":"themes/next-reloaded/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1660896772187},{"_id":"themes/next-reloaded/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1660896772185},{"_id":"themes/next-reloaded/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1660896772187},{"_id":"themes/next-reloaded/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1660896772187},{"_id":"themes/next-reloaded/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1660896772187},{"_id":"themes/next-reloaded/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1660896772187},{"_id":"themes/next-reloaded/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1660896772187},{"_id":"themes/next-reloaded/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1660896772187},{"_id":"themes/next-reloaded/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1660896772187},{"_id":"themes/next-reloaded/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1660896772187},{"_id":"themes/next-reloaded/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1660896772187},{"_id":"themes/next-reloaded/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1660896772186},{"_id":"themes/next-reloaded/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1660896772187},{"_id":"themes/next-reloaded/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1660896772187},{"_id":"themes/next-reloaded/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1660896772188},{"_id":"themes/next-reloaded/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1660896772188},{"_id":"themes/next-reloaded/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1660896772188},{"_id":"themes/next-reloaded/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1660896772188},{"_id":"themes/next-reloaded/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1660896772188},{"_id":"themes/next-reloaded/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1660896772189},{"_id":"themes/next-reloaded/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1660896772188},{"_id":"themes/next-reloaded/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1660896772188},{"_id":"themes/next-reloaded/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1660896772189},{"_id":"themes/next-reloaded/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1660896772189},{"_id":"themes/next-reloaded/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1660896772189},{"_id":"themes/next-reloaded/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1660896772189},{"_id":"themes/next-reloaded/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1660896772186},{"_id":"themes/next-reloaded/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1660896772188},{"_id":"themes/next-reloaded/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1660896772186},{"_id":"themes/next-reloaded/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1660896772186},{"_id":"themes/next-reloaded/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1660896772186},{"_id":"themes/next-reloaded/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1660896772186},{"_id":"themes/next-reloaded/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1660896772190},{"_id":"themes/next-reloaded/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1660896772190},{"_id":"themes/next-reloaded/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1660896772190},{"_id":"themes/next-reloaded/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1660896772190},{"_id":"themes/next-reloaded/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1660896772190},{"_id":"themes/next-reloaded/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1660896772190},{"_id":"themes/next-reloaded/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1660896772190},{"_id":"themes/next-reloaded/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1660896772190},{"_id":"themes/next-reloaded/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1660896772190},{"_id":"themes/next-reloaded/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1660896772190},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1660896772202},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1660896772202},{"_id":"themes/next-reloaded/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1660896772190},{"_id":"themes/next-reloaded/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1660896772201},{"_id":"themes/next-reloaded/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1660896772199},{"_id":"themes/next-reloaded/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1660896772199},{"_id":"themes/next-reloaded/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1660896772199},{"_id":"themes/next-reloaded/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1660896772199},{"_id":"themes/next-reloaded/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1660896772201},{"_id":"themes/next-reloaded/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1660896772199},{"_id":"themes/next-reloaded/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1660896772197},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1660896772201},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1660896772197},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1660896772198},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1660896772198},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1660896772198},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1660896772201},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1660896772198},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1660896772198},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1660896772198},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1660896772198},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1660896772198},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1660896772198},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1660896772198},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1660896772198},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1660896772198},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1660896772198},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1660896772198},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1660896772198},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1660896772198},{"_id":"themes/next-reloaded/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1660896772192},{"_id":"themes/next-reloaded/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1660896772193},{"_id":"themes/next-reloaded/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1660896772192},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1660896772196},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1660896772196},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1660896772196},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1660896772197},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1660896772196},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1660896772197},{"_id":"themes/next-reloaded/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1660896772194},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1660896772197},{"_id":"themes/next-reloaded/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1660896772195},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1660896772193},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1660896772193},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1660896772197},{"_id":"themes/next-reloaded/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1660896772195},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1660896772193},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1660896772193},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1660896772193},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1660896772193},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1660896772194},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1660896772193},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1660896772194},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1660896772194},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1660896772194},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1660896772193},{"_id":"themes/next-reloaded/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1660896772194},{"_id":"themes/next-reloaded/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1660896772193},{"_id":"themes/next-reloaded/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1660896772193},{"_id":"themes/next-reloaded/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1660896772193},{"_id":"themes/next-reloaded/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1660896772193},{"_id":"themes/next-reloaded/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1660896772193},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1660896772194},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1660896772194},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1660896772194},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1660896772196},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1660896772194},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1660896772194},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1660896772196},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1660896772196},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1660896772196},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1660896772197},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1660896772197},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1660896772197},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1660896772197},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1660896772197},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1660896772197},{"_id":"themes/next-reloaded/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1660896772194},{"_id":"themes/next-reloaded/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1660896772195},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1660896772197},{"_id":"themes/next-reloaded/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1660896772195},{"_id":"themes/next-reloaded/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1660896772195},{"_id":"themes/next-reloaded/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1660896772195},{"_id":"themes/next-reloaded/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1660896772195},{"_id":"themes/next-reloaded/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1660896772195},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1660896772195},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1660896772195},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1660896772195},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1660896772195},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1660896772196},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1660896772196},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1660896772195},{"_id":"themes/next-reloaded/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1660896772195},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1660896772196},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1660896772196},{"_id":"themes/next-reloaded/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1660896772196},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1660896772202},{"_id":"themes/next-reloaded/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1660896772201}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2021-02-25T13:30:45.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-02-25 21:30:45\ntype: tags\nlayout: \"tags\"\n---\n","updated":"2021-03-06T10:58:13.000Z","path":"tags/index.html","comments":1,"_id":"cl707w38e000031c9f8ok1s9d","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"go基础数据类型","keywords":"博客文章密码","abstract":"密码：first","message":"输入密码，查看文章","abbrlink":"539388a9","date":"2021-02-25T13:33:44.000Z","password":null,"_content":"\n## 1. 结构体和指针\n\n与C相同而与Java不同的是，Go语言让程序员决定何时使用指针。举例来说，这种类型定义：\n\n```go\ntype Point struct { X, Y int }\n```\n\n先来定义一个简单的struct类型，名为Point，表示内存中两个相邻的整数。\n\n![image-20201202173141496](https://raw.githubusercontent.com/gods-view/images/master/imageimage-20201202173141496.png)\n\n`Point{10,20}`表示一个已初始化的Point类型。对它进行取地址表示一个指向刚刚分配和初始化的Point类型的指针。前者在内存中是两个词，而后者是一个指向两个词的指针。\n\n结构体的域在内存中是紧挨着排列的。\n\n<!--more-->\n\n```go\ntype Rect1 struct { Min, Max Point }\ntype Rect2 struct { Min, Max *Point }\n```\n\n![image-20201202173244021](https://raw.githubusercontent.com/gods-view/images/master/imageimage-20201202173244021.png)\n\nRect1是一个具有两个Point类型属性的结构体，由在一行的两个Point--四个int代表。Rect2是一个具有两个`*Point`类型属性的结构体，由两个*Point表示。\n\n使用过C的程序员可能对`Point`和`*Point`的不同毫不见怪，但用惯Java或Python的程序员们可能就不那么轻松了。Go语言给了程序员基本内存层面的控制，由此提供了诸多能力，如控制给定数据结构集合的总大小、内存分配的次数、内存访问模式以及建立优秀系统的所有要点。\n\n\n\n## 2. 字符串\n\n有了前面的准备，我们就可以开始研究更有趣的数据类型了。\n\n![image-20201202173305713](https://raw.githubusercontent.com/gods-view/images/master/imageimage-20201202173305713.png)\n\n（灰色的箭头表示已经实现的但不能直接可见的指针）\n\n字符串在Go语言内存模型中用一个2字长的数据结构表示。它包含一个指向字符串存储数据的指针和一个长度数据。因为string类型是不可变的，对于多字符串共享同一个存储数据是安全的。切分操作`str[i:j]`会得到一个新的2字长结构，一个可能不同的但仍指向同一个字节序列(即上文说的存储数据)的指针和长度数据。这意味着字符串切分可以在不涉及内存分配或复制操作。这使得字符串切分的效率等同于传递下标。\n\n（说句题外话，在Java和其他语言里有一个有名的“疑难杂症”：在你分割字符串并保存时，对于源字符串的引用在内存中仍然保存着完整的原始字符串--即使只有一小部分仍被需要，Go也有这个“毛病”。另一方面，我们努力但又失败了的是，让字符串分割操作变得昂贵--包含一次分配和一次复制。在大多数程序中都避免了这么做。）\n\n\n\n## 3. slice\n\n> 切片拥有 **长度** 和 **容量**。\n>\n> 切片的长度就是它所包含的元素个数。\n>\n> 切片的容量是从它的第一个元素开始数，到其底层数组元素末尾的个数。\n>\n> 切片 s 的长度和容量可通过表达式` len(s)` 和 `cap(s)` 来获取。\n>\n\n------\n\n一个slice是一个数组某个部分的引用。在内存中，它是一个包含3个域的结构体：指向slice中第一个元素的指针，slice的长度，以及slice的容量。长度是下标操作的上界，如x[i]中i必须小于长度。容量是分割操作的上界，如x[i:j]中j不能大于容量。\n\n![](https://raw.githubusercontent.com/gods-view/images/master/image20201201174947.png)\n\n数组的slice并不会实际复制一份数据，它只是创建一个新的数据结构，包含了另外的一个指针，一个长度和一个容量数据。 如同分割一个字符串，分割数组也不涉及复制操作：它只是新建了一个结构来放置一个不同的指针，长度和容量。在例子中，对[]int{2,3,5,7,11}求值操作会创建一个包含五个值的数组，并设置x的属性来描述这个数组。分割表达式x[1:3]并不分配更多的数据：它只是写了一个新的slice结构的属性来引用相同的存储数据。在例子中，长度为2--只有y[0]和y[1]是有效的索引，但是容量为4--y[0:4]是一个有效的分割表达式。\n\n由于slice是不同于指针的多字长结构，分割操作并不需要分配内存，甚至没有通常被保存在堆中的slice头部。这种表示方法使slice操作和在C中传递指针、长度对一样廉价。Go语言最初使用一个指向以上结构的指针来表示slice，但是这样做意味着每个slice操作都会分配一块新的内存对象。即使使用了快速的分配器，还是给垃圾收集器制造了很多没有必要的工作。移除间接引用及分配操作可以让slice足够廉价，以避免传递显式索引。\n\n\n\n## 4. map的实现\n\nGo中的map在底层是用哈希表实现的，你可以在 $GOROOT/src/pkg/runtime/hashmap.goc 找到它的实现。\n\n### 4.1 数据结构\n\n哈希表的数据结构中一些关键的域如下所示：\n\n```go\nstruct Hmap\n{\n    uint8   B;    // 可以容纳2^B个项\n    uint16  bucketsize;   // 每个桶的大小\n\n    byte    *buckets;     // 2^B个Buckets的数组\n    byte    *oldbuckets;  // 前一个buckets，只有当正在扩容时才不为空\n};\n```\n\n上面给出的结构体只是Hmap的部分的域。需要注意到的是，这里直接使用的是Bucket的数组，而不是Bucket*指针的数组。这意味着，第一个Bucket和后面溢出链的Bucket分配有些不同。第一个Bucket是用的一段连续的内存空间，而后面溢出链的Bucket的空间是使用mallocgc分配的。\n\n这个hash结构使用的是一个可扩展哈希的算法，由hash值mod当前hash表大小决定某一个值属于哪个桶，而hash表大小是2的指数，即上面结构体中的2^B。每次扩容，会增大到上次大小的两倍。结构体中有一个buckets和一个oldbuckets是用来实现增量扩容的。正常情况下直接使用buckets，而oldbuckets为空。如果当前哈希表正在扩容中，则oldbuckets不为空，并且buckets大小是oldbuckets大小的两倍。\n\n具体的Bucket结构如下所示：\n\n```go\nstruct Bucket\n{\n    uint8  tophash[BUCKETSIZE]; // hash值的高8位....低位从bucket的array定位到bucket\n    Bucket *overflow;           // 溢出桶链表，如果有\n    byte   data[1];             // BUCKETSIZE keys followed by BUCKETSIZE values\n};\n```\n\n其中BUCKETSIZE是用宏定义的8，每个bucket中存放最多8个key/value对, 如果多于8个，那么会申请一个新的bucket，并将它与之前的bucket链起来。\n\n按key的类型采用相应的hash算法得到key的hash值。将hash值的低位当作Hmap结构体中buckets数组的index，找到key所在的bucket。将hash的高8位存储在了bucket的tophash中。**注意，这里高8位不是用来当作key/value在bucket内部的offset的，而是作为一个主键，在查找时对tophash数组的每一项进行顺序匹配的**。先比较hash值高位与bucket的tophash[i]是否相等，如果相等则再比较bucket的第i个的key与所给的key是否相等。如果相等，则返回其对应的value，反之，在overflow buckets中按照上述方法继续寻找。\n\n整个hash的存储如下图所示(临时先采用了XX同学画的图，这个图有点问题)：\n\n![image-20201202173456850](https://raw.githubusercontent.com/gods-view/images/master/imageimage-20201202173456850.png)\n\n图2.2 HMap的存储结构\n\n注意一个细节是Bucket中key/value的放置顺序，是将keys放在一起，values放在一起，为什么不将key和对应的value放在一起呢？如果那么做，存储结构将变成key1/value1/key2/value2… 设想如果是这样的一个map[int64]int8，考虑到字节对齐，会浪费很多存储空间。不得不说通过上述的一个小细节，可以看出Go在设计上的深思熟虑。\n\n### 4.2 增量扩容\n\n大家都知道哈希表表就是以空间换时间，访问速度是直接跟填充因子相关的，所以当哈希表太满之后就需要进行扩容。\n\n如果扩容前的哈希表大小为2^B，扩容之后的大小为2^(B+1)，每次扩容都变为原来大小的两倍，哈希表大小始终为2的指数倍，则有(hash mod 2^B)等价于(hash & (2^B-1))。这样可以简化运算，避免了取余操作。\n\n假设扩容之前容量为X，扩容之后容量为Y，对于某个哈希值hash，一般情况下(hash mod X)不等于(hash mod Y)，所以扩容之后要重新计算每一项在哈希表中的新位置。当hash表扩容之后，需要将那些旧的pair重新哈希到新的table上(源代码中称之为evacuate)， 这个工作并没有在扩容之后一次性完成，而是逐步的完成（在insert和remove时每次搬移1-2个pair），Go语言使用的是增量扩容。\n\n为什么会增量扩容呢？主要是缩短map容器的响应时间。假如我们直接将map用作某个响应实时性要求非常高的web应用存储，如果不采用增量扩容，当map里面存储的元素很多之后，扩容时系统就会卡往，导致较长一段时间内无法响应请求。不过增量扩容本质上还是将总的扩容时间分摊到了每一次哈希操作上面。\n\n扩容会建立一个大小是原来2倍的新的表，将旧的bucket搬到新的表中之后，并不会将旧的bucket从oldbucket中删除，而是加上一个已删除的标记。\n\n正是由于这个工作是逐渐完成的，这样就会导致一部分数据在old table中，一部分在new table中， 所以对于hash table的insert, remove, lookup操作的处理逻辑产生影响。只有当所有的bucket都从旧表移到新表之后，才会将oldbucket释放掉。\n\n扩容的填充因子是多少呢？如果grow的太频繁，会造成空间的利用率很低， 如果很久才grow，会形成很多的overflow buckets，查找的效率也会下降。 这个平衡点如何选取呢(在go中，这个平衡点是有一个宏控制的(#define LOAD 6.5), 它的意思是这样的，如果table中元素的个数大于table中能容纳的元素的个数， 那么就触发一次grow动作。那么这个6.5是怎么得到的呢？原来这个值来源于作者的一个测试程序，遗憾的是没能找到相关的源码，不过作者给出了测试的结果：\n\n```\n        LOAD    %overflow  bytes/entry     hitprobe    missprobe\n        4.00         2.13        20.77         3.00         4.00\n        4.50         4.05        17.30         3.25         4.50\n        5.00         6.85        14.77         3.50         5.00\n        5.50        10.55        12.94         3.75         5.50\n        6.00        15.27        11.67         4.00         6.00\n        6.50        20.90        10.79         4.25         6.50\n        7.00        27.14        10.15         4.50         7.00\n        7.50        34.03         9.73         4.75         7.50\n        8.00        41.10         9.40         5.00         8.00\n\n %overflow   = percentage of buckets which have an overflow bucket\n bytes/entry = overhead bytes used per key/value pair\n hitprobe    = # of entries to check when looking up a present key\n missprobe   = # of entries to check when looking up an absent key\n```\n\n可以看出作者取了一个相对适中的值。\n\n### 4.3 查找过程\n\n1. 根据key计算出hash值。\n2. 如果存在old table, 首先在old table中查找，如果找到的bucket已经evacuated，转到步骤3。 反之，返回其对应的value。\n3. 在new table中查找对应的value。\n\n这里一个细节需要注意一下。不认真看可能会以为低位用于定位bucket在数组的index，那么高位就是用于key/valule在bucket内部的offset。事实上高8位不是用作offset的，而是用于加快key的比较的。\n\n```\ndo { //对每个桶b\n    //依次比较桶内的每一项存放的tophash与所求的hash值高位是否相等\n    for(i = 0, k = b->data, v = k + h->keysize * BUCKETSIZE; i < BUCKETSIZE; i++, k += h->keysize, v += h->valuesize) {\n        if(b->tophash[i] == top) { \n            k2 = IK(h, k);\n            t->key->alg->equal(&eq, t->key->size, key, k2);\n            if(eq) { //相等的情况下再去做key比较...\n                *keyp = k2;\n                return IV(h, v);\n            }\n        }\n    }\n    b = b->overflow; //b设置为它的下一下溢出链\n} while(b != nil);\n```\n\n### 4.4 插入过程分析\n\n1. 根据key算出hash值，进而得出对应的bucket。\n2. 如果bucket在old table中，将其重新散列到new table中。\n3. 在bucket中，查找空闲的位置，如果已经存在需要插入的key，更新其对应的value。\n4. 根据table中元素的个数，判断是否grow table。\n5. 如果对应的bucket已经full，重新申请新的bucket作为overbucket。\n6. 将key/value pair插入到bucket中。\n\n这里也有几个细节需要注意一下。\n\n在扩容过程中，oldbucket是被冻结的，查找时会在oldbucket中查找，但不会在oldbucket中插入数据。如果在oldbucket是找到了相应的key，做法是将它迁移到新bucket后加入evalucated标记。并且还会额外的迁移另一个pair。\n\n然后就是只要在某个bucket中找到第一个空位，就会将key/value插入到这个位置。也就是位置位于bucket前面的会覆盖后面的(类似于存储系统设计中做删除时的常用的技巧之一，直接用新数据追加方式写，新版本数据覆盖老版本数据)。找到了相同的key或者找到第一个空位就可以结束遍历了。不过这也意味着做删除时必须完全的遍历bucket所有溢出链，将所有的相同key数据都删除。所以目前map的设计是为插入而优化的，删除效率会比插入低一些。\n\n### 4.5 map设计中的性能优化\n\n读完map源代码发现作者还是做了很多设计上的选择的。本人水平有限，谈不上优劣的点评，这里只是拿出来与读者分享。\n\nHMap中是Bucket的数组，而不是Bucket指针的数组。好的方面是可以一次分配较大内存，减少了分配次数，避免多次调用mallocgc。但相应的缺点，其一是可扩展哈希的算法并没有发生作用，扩容时会造成对整个数组的值拷贝(如果实现上用Bucket指针的数组就是指针拷贝了，代价小很多)。其二是首个bucket与后面产生了不一致性。这个会使删除逻辑变得复杂一点。比如删除后面的溢出链可以直接删除，而对于首个bucket，要等到evalucated完毕后，整个oldbucket删除时进行。\n\n没有重用设freelist重用删除的结点。作者把这个加了一个TODO的注释，不过想了一下觉得这个做的意义不大。因为一方面，bucket大小并不一致，重用比较麻烦。另一方面，下层存储已经做过内存池的实现了，所以这里不做重用也会在内存分配那一层被重用的，\n\nbucket直接key/value和间接key/value优化。这个优化做得蛮好的。注意看代码会发现，如果key或value小于128字节，则它们的值是直接使用的bucket作为存储的。否则bucket中存储的是指向实际key/value数据的指针，\n\nbucket存8个key/value对。查找时进行顺序比较。第一次发现高位居然不是用作offset，而是用于加快比较的。定位到bucket之后，居然是一个顺序比较的查找过程。后面仔细想了想，觉得还行。由于bucket只有8个，顺序比较下来也不算过分。仍然是O(1)只不过前面系数大一点点罢了。相当于hash到一个小范围之后，在这个小范围内顺序查找。\n\n插入删除的优化。前面已经提过了，插入只要找到相同的key或者第一个空位，bucket中如果存在一个以上的相同key，前面覆盖后面的(只是如果，实际上不会发生)。而删除就需要遍历完所有bucket溢出链了。这样map的设计就是为插入优化的。考虑到一般的应用场景，这个应该算是很合理的。\n\n\n\n## 5. nil类型\n\n什么？nil是一种数据结构么？为什么会讲到它，没搞错吧？没搞错。不仅仅是Go语言中，每门语言中nil都是非常重要的，它代表的是空值的语义。\n\n在不同语言中，表示空这个概念都有细微不同。比如在scheme语言(一种lisp方言)中，nil是true的！而在ruby语言中，一切都是对象，连nil也是一个对象！在C中NULL跟0是等价的。\n\n按照Go语言规范，任何类型在未初始化时都对应一个零值：布尔类型是false，整型是0，字符串是\"\"，而指针，函数，interface，slice，channel和map的零值都是nil。\n\n### 5.1 interface\n\n一个interface在没有进行初始化时，对应的值是nil。也就是说`var v interface{}`，\n\n此时v就是一个nil。在底层存储上，它是一个空指针。与之不同的情况是，interface值为空。比如：\n\n```go\nvar v *T\nvar i interface{}\ni = v\n```\n\n此时i是一个interface，它的值是nil，但它自身不为nil。\n\nGo中的error其实就是一个实现了Error方法的接口：\n\n```go\ntype error interface {\n    Error() string\n}\n```\n\n因此，我们可以自定义一个error：\n\n```go\ntype Error struct {\n    errCode uint8\n}\nfunc (e *Error) Error() string {\n        switch e.errCode {\n        case 1:\n                return \"file not found\"\n        case 2:\n                return \"time out\"\n        case 3:\n                return \"permission denied\"\n        default:\n                return \"unknown error\"\n         }\n}\n```\n\n如果我们这样使用它：\n\n```go\nfunc checkError(err error) {\n    if err != nil {\n        panic(err)\n    }\n}\nvar e *Error\ncheckError(e)\n```\n\ne是nil的，但是当我们checkError时就会panic。请读者思考一下为什么？\n\n总之，interface跟C语言的指针一样非常灵活，关于空的语义，也跟空指针一样容易困扰新手的，需要注意。\n\n### 5.2 string和slice\n\nstring的空值是\"\"，它是不能跟nil比较的。即使是空的string，它的大小也是两个机器字长的。slice也类似，它的空值并不是一个空指针，而是结构体中的指针域为空，空的slice的大小也是三个机器字长的。\n\n### 5.3 channel和map\n\nchannel跟string或slice有些不同，它在栈上只是一个指针，实际的数据都是由指针所指向的堆上面。\n\n跟channel相关的操作有：初始化/读/写/关闭。channel未初始化值就是nil，未初始化的channel是不能使用的。下面是一些操作规则：\n\n- 读或者写一个nil的channel的操作会永远阻塞。\n- 读一个关闭的channel会立刻返回一个channel元素类型的零值。\n- 写一个关闭的channel会导致panic。\n\nmap也是指针，实际数据在堆中，未初始化的值是nil。\n","source":"_posts/go基础数据类型.md","raw":"---\ntitle: go基础数据类型\ntags:\n  - Go\nkeywords: 博客文章密码\nabstract: 密码：first\nmessage: 输入密码，查看文章\nabbrlink: 539388a9\ndate: 2021-02-25 21:33:44\npassword:\n---\n\n## 1. 结构体和指针\n\n与C相同而与Java不同的是，Go语言让程序员决定何时使用指针。举例来说，这种类型定义：\n\n```go\ntype Point struct { X, Y int }\n```\n\n先来定义一个简单的struct类型，名为Point，表示内存中两个相邻的整数。\n\n![image-20201202173141496](https://raw.githubusercontent.com/gods-view/images/master/imageimage-20201202173141496.png)\n\n`Point{10,20}`表示一个已初始化的Point类型。对它进行取地址表示一个指向刚刚分配和初始化的Point类型的指针。前者在内存中是两个词，而后者是一个指向两个词的指针。\n\n结构体的域在内存中是紧挨着排列的。\n\n<!--more-->\n\n```go\ntype Rect1 struct { Min, Max Point }\ntype Rect2 struct { Min, Max *Point }\n```\n\n![image-20201202173244021](https://raw.githubusercontent.com/gods-view/images/master/imageimage-20201202173244021.png)\n\nRect1是一个具有两个Point类型属性的结构体，由在一行的两个Point--四个int代表。Rect2是一个具有两个`*Point`类型属性的结构体，由两个*Point表示。\n\n使用过C的程序员可能对`Point`和`*Point`的不同毫不见怪，但用惯Java或Python的程序员们可能就不那么轻松了。Go语言给了程序员基本内存层面的控制，由此提供了诸多能力，如控制给定数据结构集合的总大小、内存分配的次数、内存访问模式以及建立优秀系统的所有要点。\n\n\n\n## 2. 字符串\n\n有了前面的准备，我们就可以开始研究更有趣的数据类型了。\n\n![image-20201202173305713](https://raw.githubusercontent.com/gods-view/images/master/imageimage-20201202173305713.png)\n\n（灰色的箭头表示已经实现的但不能直接可见的指针）\n\n字符串在Go语言内存模型中用一个2字长的数据结构表示。它包含一个指向字符串存储数据的指针和一个长度数据。因为string类型是不可变的，对于多字符串共享同一个存储数据是安全的。切分操作`str[i:j]`会得到一个新的2字长结构，一个可能不同的但仍指向同一个字节序列(即上文说的存储数据)的指针和长度数据。这意味着字符串切分可以在不涉及内存分配或复制操作。这使得字符串切分的效率等同于传递下标。\n\n（说句题外话，在Java和其他语言里有一个有名的“疑难杂症”：在你分割字符串并保存时，对于源字符串的引用在内存中仍然保存着完整的原始字符串--即使只有一小部分仍被需要，Go也有这个“毛病”。另一方面，我们努力但又失败了的是，让字符串分割操作变得昂贵--包含一次分配和一次复制。在大多数程序中都避免了这么做。）\n\n\n\n## 3. slice\n\n> 切片拥有 **长度** 和 **容量**。\n>\n> 切片的长度就是它所包含的元素个数。\n>\n> 切片的容量是从它的第一个元素开始数，到其底层数组元素末尾的个数。\n>\n> 切片 s 的长度和容量可通过表达式` len(s)` 和 `cap(s)` 来获取。\n>\n\n------\n\n一个slice是一个数组某个部分的引用。在内存中，它是一个包含3个域的结构体：指向slice中第一个元素的指针，slice的长度，以及slice的容量。长度是下标操作的上界，如x[i]中i必须小于长度。容量是分割操作的上界，如x[i:j]中j不能大于容量。\n\n![](https://raw.githubusercontent.com/gods-view/images/master/image20201201174947.png)\n\n数组的slice并不会实际复制一份数据，它只是创建一个新的数据结构，包含了另外的一个指针，一个长度和一个容量数据。 如同分割一个字符串，分割数组也不涉及复制操作：它只是新建了一个结构来放置一个不同的指针，长度和容量。在例子中，对[]int{2,3,5,7,11}求值操作会创建一个包含五个值的数组，并设置x的属性来描述这个数组。分割表达式x[1:3]并不分配更多的数据：它只是写了一个新的slice结构的属性来引用相同的存储数据。在例子中，长度为2--只有y[0]和y[1]是有效的索引，但是容量为4--y[0:4]是一个有效的分割表达式。\n\n由于slice是不同于指针的多字长结构，分割操作并不需要分配内存，甚至没有通常被保存在堆中的slice头部。这种表示方法使slice操作和在C中传递指针、长度对一样廉价。Go语言最初使用一个指向以上结构的指针来表示slice，但是这样做意味着每个slice操作都会分配一块新的内存对象。即使使用了快速的分配器，还是给垃圾收集器制造了很多没有必要的工作。移除间接引用及分配操作可以让slice足够廉价，以避免传递显式索引。\n\n\n\n## 4. map的实现\n\nGo中的map在底层是用哈希表实现的，你可以在 $GOROOT/src/pkg/runtime/hashmap.goc 找到它的实现。\n\n### 4.1 数据结构\n\n哈希表的数据结构中一些关键的域如下所示：\n\n```go\nstruct Hmap\n{\n    uint8   B;    // 可以容纳2^B个项\n    uint16  bucketsize;   // 每个桶的大小\n\n    byte    *buckets;     // 2^B个Buckets的数组\n    byte    *oldbuckets;  // 前一个buckets，只有当正在扩容时才不为空\n};\n```\n\n上面给出的结构体只是Hmap的部分的域。需要注意到的是，这里直接使用的是Bucket的数组，而不是Bucket*指针的数组。这意味着，第一个Bucket和后面溢出链的Bucket分配有些不同。第一个Bucket是用的一段连续的内存空间，而后面溢出链的Bucket的空间是使用mallocgc分配的。\n\n这个hash结构使用的是一个可扩展哈希的算法，由hash值mod当前hash表大小决定某一个值属于哪个桶，而hash表大小是2的指数，即上面结构体中的2^B。每次扩容，会增大到上次大小的两倍。结构体中有一个buckets和一个oldbuckets是用来实现增量扩容的。正常情况下直接使用buckets，而oldbuckets为空。如果当前哈希表正在扩容中，则oldbuckets不为空，并且buckets大小是oldbuckets大小的两倍。\n\n具体的Bucket结构如下所示：\n\n```go\nstruct Bucket\n{\n    uint8  tophash[BUCKETSIZE]; // hash值的高8位....低位从bucket的array定位到bucket\n    Bucket *overflow;           // 溢出桶链表，如果有\n    byte   data[1];             // BUCKETSIZE keys followed by BUCKETSIZE values\n};\n```\n\n其中BUCKETSIZE是用宏定义的8，每个bucket中存放最多8个key/value对, 如果多于8个，那么会申请一个新的bucket，并将它与之前的bucket链起来。\n\n按key的类型采用相应的hash算法得到key的hash值。将hash值的低位当作Hmap结构体中buckets数组的index，找到key所在的bucket。将hash的高8位存储在了bucket的tophash中。**注意，这里高8位不是用来当作key/value在bucket内部的offset的，而是作为一个主键，在查找时对tophash数组的每一项进行顺序匹配的**。先比较hash值高位与bucket的tophash[i]是否相等，如果相等则再比较bucket的第i个的key与所给的key是否相等。如果相等，则返回其对应的value，反之，在overflow buckets中按照上述方法继续寻找。\n\n整个hash的存储如下图所示(临时先采用了XX同学画的图，这个图有点问题)：\n\n![image-20201202173456850](https://raw.githubusercontent.com/gods-view/images/master/imageimage-20201202173456850.png)\n\n图2.2 HMap的存储结构\n\n注意一个细节是Bucket中key/value的放置顺序，是将keys放在一起，values放在一起，为什么不将key和对应的value放在一起呢？如果那么做，存储结构将变成key1/value1/key2/value2… 设想如果是这样的一个map[int64]int8，考虑到字节对齐，会浪费很多存储空间。不得不说通过上述的一个小细节，可以看出Go在设计上的深思熟虑。\n\n### 4.2 增量扩容\n\n大家都知道哈希表表就是以空间换时间，访问速度是直接跟填充因子相关的，所以当哈希表太满之后就需要进行扩容。\n\n如果扩容前的哈希表大小为2^B，扩容之后的大小为2^(B+1)，每次扩容都变为原来大小的两倍，哈希表大小始终为2的指数倍，则有(hash mod 2^B)等价于(hash & (2^B-1))。这样可以简化运算，避免了取余操作。\n\n假设扩容之前容量为X，扩容之后容量为Y，对于某个哈希值hash，一般情况下(hash mod X)不等于(hash mod Y)，所以扩容之后要重新计算每一项在哈希表中的新位置。当hash表扩容之后，需要将那些旧的pair重新哈希到新的table上(源代码中称之为evacuate)， 这个工作并没有在扩容之后一次性完成，而是逐步的完成（在insert和remove时每次搬移1-2个pair），Go语言使用的是增量扩容。\n\n为什么会增量扩容呢？主要是缩短map容器的响应时间。假如我们直接将map用作某个响应实时性要求非常高的web应用存储，如果不采用增量扩容，当map里面存储的元素很多之后，扩容时系统就会卡往，导致较长一段时间内无法响应请求。不过增量扩容本质上还是将总的扩容时间分摊到了每一次哈希操作上面。\n\n扩容会建立一个大小是原来2倍的新的表，将旧的bucket搬到新的表中之后，并不会将旧的bucket从oldbucket中删除，而是加上一个已删除的标记。\n\n正是由于这个工作是逐渐完成的，这样就会导致一部分数据在old table中，一部分在new table中， 所以对于hash table的insert, remove, lookup操作的处理逻辑产生影响。只有当所有的bucket都从旧表移到新表之后，才会将oldbucket释放掉。\n\n扩容的填充因子是多少呢？如果grow的太频繁，会造成空间的利用率很低， 如果很久才grow，会形成很多的overflow buckets，查找的效率也会下降。 这个平衡点如何选取呢(在go中，这个平衡点是有一个宏控制的(#define LOAD 6.5), 它的意思是这样的，如果table中元素的个数大于table中能容纳的元素的个数， 那么就触发一次grow动作。那么这个6.5是怎么得到的呢？原来这个值来源于作者的一个测试程序，遗憾的是没能找到相关的源码，不过作者给出了测试的结果：\n\n```\n        LOAD    %overflow  bytes/entry     hitprobe    missprobe\n        4.00         2.13        20.77         3.00         4.00\n        4.50         4.05        17.30         3.25         4.50\n        5.00         6.85        14.77         3.50         5.00\n        5.50        10.55        12.94         3.75         5.50\n        6.00        15.27        11.67         4.00         6.00\n        6.50        20.90        10.79         4.25         6.50\n        7.00        27.14        10.15         4.50         7.00\n        7.50        34.03         9.73         4.75         7.50\n        8.00        41.10         9.40         5.00         8.00\n\n %overflow   = percentage of buckets which have an overflow bucket\n bytes/entry = overhead bytes used per key/value pair\n hitprobe    = # of entries to check when looking up a present key\n missprobe   = # of entries to check when looking up an absent key\n```\n\n可以看出作者取了一个相对适中的值。\n\n### 4.3 查找过程\n\n1. 根据key计算出hash值。\n2. 如果存在old table, 首先在old table中查找，如果找到的bucket已经evacuated，转到步骤3。 反之，返回其对应的value。\n3. 在new table中查找对应的value。\n\n这里一个细节需要注意一下。不认真看可能会以为低位用于定位bucket在数组的index，那么高位就是用于key/valule在bucket内部的offset。事实上高8位不是用作offset的，而是用于加快key的比较的。\n\n```\ndo { //对每个桶b\n    //依次比较桶内的每一项存放的tophash与所求的hash值高位是否相等\n    for(i = 0, k = b->data, v = k + h->keysize * BUCKETSIZE; i < BUCKETSIZE; i++, k += h->keysize, v += h->valuesize) {\n        if(b->tophash[i] == top) { \n            k2 = IK(h, k);\n            t->key->alg->equal(&eq, t->key->size, key, k2);\n            if(eq) { //相等的情况下再去做key比较...\n                *keyp = k2;\n                return IV(h, v);\n            }\n        }\n    }\n    b = b->overflow; //b设置为它的下一下溢出链\n} while(b != nil);\n```\n\n### 4.4 插入过程分析\n\n1. 根据key算出hash值，进而得出对应的bucket。\n2. 如果bucket在old table中，将其重新散列到new table中。\n3. 在bucket中，查找空闲的位置，如果已经存在需要插入的key，更新其对应的value。\n4. 根据table中元素的个数，判断是否grow table。\n5. 如果对应的bucket已经full，重新申请新的bucket作为overbucket。\n6. 将key/value pair插入到bucket中。\n\n这里也有几个细节需要注意一下。\n\n在扩容过程中，oldbucket是被冻结的，查找时会在oldbucket中查找，但不会在oldbucket中插入数据。如果在oldbucket是找到了相应的key，做法是将它迁移到新bucket后加入evalucated标记。并且还会额外的迁移另一个pair。\n\n然后就是只要在某个bucket中找到第一个空位，就会将key/value插入到这个位置。也就是位置位于bucket前面的会覆盖后面的(类似于存储系统设计中做删除时的常用的技巧之一，直接用新数据追加方式写，新版本数据覆盖老版本数据)。找到了相同的key或者找到第一个空位就可以结束遍历了。不过这也意味着做删除时必须完全的遍历bucket所有溢出链，将所有的相同key数据都删除。所以目前map的设计是为插入而优化的，删除效率会比插入低一些。\n\n### 4.5 map设计中的性能优化\n\n读完map源代码发现作者还是做了很多设计上的选择的。本人水平有限，谈不上优劣的点评，这里只是拿出来与读者分享。\n\nHMap中是Bucket的数组，而不是Bucket指针的数组。好的方面是可以一次分配较大内存，减少了分配次数，避免多次调用mallocgc。但相应的缺点，其一是可扩展哈希的算法并没有发生作用，扩容时会造成对整个数组的值拷贝(如果实现上用Bucket指针的数组就是指针拷贝了，代价小很多)。其二是首个bucket与后面产生了不一致性。这个会使删除逻辑变得复杂一点。比如删除后面的溢出链可以直接删除，而对于首个bucket，要等到evalucated完毕后，整个oldbucket删除时进行。\n\n没有重用设freelist重用删除的结点。作者把这个加了一个TODO的注释，不过想了一下觉得这个做的意义不大。因为一方面，bucket大小并不一致，重用比较麻烦。另一方面，下层存储已经做过内存池的实现了，所以这里不做重用也会在内存分配那一层被重用的，\n\nbucket直接key/value和间接key/value优化。这个优化做得蛮好的。注意看代码会发现，如果key或value小于128字节，则它们的值是直接使用的bucket作为存储的。否则bucket中存储的是指向实际key/value数据的指针，\n\nbucket存8个key/value对。查找时进行顺序比较。第一次发现高位居然不是用作offset，而是用于加快比较的。定位到bucket之后，居然是一个顺序比较的查找过程。后面仔细想了想，觉得还行。由于bucket只有8个，顺序比较下来也不算过分。仍然是O(1)只不过前面系数大一点点罢了。相当于hash到一个小范围之后，在这个小范围内顺序查找。\n\n插入删除的优化。前面已经提过了，插入只要找到相同的key或者第一个空位，bucket中如果存在一个以上的相同key，前面覆盖后面的(只是如果，实际上不会发生)。而删除就需要遍历完所有bucket溢出链了。这样map的设计就是为插入优化的。考虑到一般的应用场景，这个应该算是很合理的。\n\n\n\n## 5. nil类型\n\n什么？nil是一种数据结构么？为什么会讲到它，没搞错吧？没搞错。不仅仅是Go语言中，每门语言中nil都是非常重要的，它代表的是空值的语义。\n\n在不同语言中，表示空这个概念都有细微不同。比如在scheme语言(一种lisp方言)中，nil是true的！而在ruby语言中，一切都是对象，连nil也是一个对象！在C中NULL跟0是等价的。\n\n按照Go语言规范，任何类型在未初始化时都对应一个零值：布尔类型是false，整型是0，字符串是\"\"，而指针，函数，interface，slice，channel和map的零值都是nil。\n\n### 5.1 interface\n\n一个interface在没有进行初始化时，对应的值是nil。也就是说`var v interface{}`，\n\n此时v就是一个nil。在底层存储上，它是一个空指针。与之不同的情况是，interface值为空。比如：\n\n```go\nvar v *T\nvar i interface{}\ni = v\n```\n\n此时i是一个interface，它的值是nil，但它自身不为nil。\n\nGo中的error其实就是一个实现了Error方法的接口：\n\n```go\ntype error interface {\n    Error() string\n}\n```\n\n因此，我们可以自定义一个error：\n\n```go\ntype Error struct {\n    errCode uint8\n}\nfunc (e *Error) Error() string {\n        switch e.errCode {\n        case 1:\n                return \"file not found\"\n        case 2:\n                return \"time out\"\n        case 3:\n                return \"permission denied\"\n        default:\n                return \"unknown error\"\n         }\n}\n```\n\n如果我们这样使用它：\n\n```go\nfunc checkError(err error) {\n    if err != nil {\n        panic(err)\n    }\n}\nvar e *Error\ncheckError(e)\n```\n\ne是nil的，但是当我们checkError时就会panic。请读者思考一下为什么？\n\n总之，interface跟C语言的指针一样非常灵活，关于空的语义，也跟空指针一样容易困扰新手的，需要注意。\n\n### 5.2 string和slice\n\nstring的空值是\"\"，它是不能跟nil比较的。即使是空的string，它的大小也是两个机器字长的。slice也类似，它的空值并不是一个空指针，而是结构体中的指针域为空，空的slice的大小也是三个机器字长的。\n\n### 5.3 channel和map\n\nchannel跟string或slice有些不同，它在栈上只是一个指针，实际的数据都是由指针所指向的堆上面。\n\n跟channel相关的操作有：初始化/读/写/关闭。channel未初始化值就是nil，未初始化的channel是不能使用的。下面是一些操作规则：\n\n- 读或者写一个nil的channel的操作会永远阻塞。\n- 读一个关闭的channel会立刻返回一个channel元素类型的零值。\n- 写一个关闭的channel会导致panic。\n\nmap也是指针，实际数据在堆中，未初始化的值是nil。\n","slug":"go基础数据类型","published":1,"updated":"2021-03-06T10:58:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl707w38g000131c9gfutfj0j","content":"<h2 id=\"1-结构体和指针\"><a href=\"#1-结构体和指针\" class=\"headerlink\" title=\"1. 结构体和指针\"></a>1. 结构体和指针</h2><p>与C相同而与Java不同的是，Go语言让程序员决定何时使用指针。举例来说，这种类型定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Point <span class=\"keyword\">struct</span> &#123; X, Y <span class=\"type\">int</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>先来定义一个简单的struct类型，名为Point，表示内存中两个相邻的整数。</p>\n<p><img src=\"https://raw.githubusercontent.com/gods-view/images/master/imageimage-20201202173141496.png\" alt=\"image-20201202173141496\"></p>\n<p><code>Point&#123;10,20&#125;</code>表示一个已初始化的Point类型。对它进行取地址表示一个指向刚刚分配和初始化的Point类型的指针。前者在内存中是两个词，而后者是一个指向两个词的指针。</p>\n<p>结构体的域在内存中是紧挨着排列的。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Rect1 <span class=\"keyword\">struct</span> &#123; Min, Max Point &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect2 <span class=\"keyword\">struct</span> &#123; Min, Max *Point &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/gods-view/images/master/imageimage-20201202173244021.png\" alt=\"image-20201202173244021\"></p>\n<p>Rect1是一个具有两个Point类型属性的结构体，由在一行的两个Point–四个int代表。Rect2是一个具有两个<code>*Point</code>类型属性的结构体，由两个*Point表示。</p>\n<p>使用过C的程序员可能对<code>Point</code>和<code>*Point</code>的不同毫不见怪，但用惯Java或Python的程序员们可能就不那么轻松了。Go语言给了程序员基本内存层面的控制，由此提供了诸多能力，如控制给定数据结构集合的总大小、内存分配的次数、内存访问模式以及建立优秀系统的所有要点。</p>\n<h2 id=\"2-字符串\"><a href=\"#2-字符串\" class=\"headerlink\" title=\"2. 字符串\"></a>2. 字符串</h2><p>有了前面的准备，我们就可以开始研究更有趣的数据类型了。</p>\n<p><img src=\"https://raw.githubusercontent.com/gods-view/images/master/imageimage-20201202173305713.png\" alt=\"image-20201202173305713\"></p>\n<p>（灰色的箭头表示已经实现的但不能直接可见的指针）</p>\n<p>字符串在Go语言内存模型中用一个2字长的数据结构表示。它包含一个指向字符串存储数据的指针和一个长度数据。因为string类型是不可变的，对于多字符串共享同一个存储数据是安全的。切分操作<code>str[i:j]</code>会得到一个新的2字长结构，一个可能不同的但仍指向同一个字节序列(即上文说的存储数据)的指针和长度数据。这意味着字符串切分可以在不涉及内存分配或复制操作。这使得字符串切分的效率等同于传递下标。</p>\n<p>（说句题外话，在Java和其他语言里有一个有名的“疑难杂症”：在你分割字符串并保存时，对于源字符串的引用在内存中仍然保存着完整的原始字符串–即使只有一小部分仍被需要，Go也有这个“毛病”。另一方面，我们努力但又失败了的是，让字符串分割操作变得昂贵–包含一次分配和一次复制。在大多数程序中都避免了这么做。）</p>\n<h2 id=\"3-slice\"><a href=\"#3-slice\" class=\"headerlink\" title=\"3. slice\"></a>3. slice</h2><blockquote>\n<p>切片拥有 <strong>长度</strong> 和 <strong>容量</strong>。</p>\n<p>切片的长度就是它所包含的元素个数。</p>\n<p>切片的容量是从它的第一个元素开始数，到其底层数组元素末尾的个数。</p>\n<p>切片 s 的长度和容量可通过表达式<code> len(s)</code> 和 <code>cap(s)</code> 来获取。</p>\n</blockquote>\n<hr>\n<p>一个slice是一个数组某个部分的引用。在内存中，它是一个包含3个域的结构体：指向slice中第一个元素的指针，slice的长度，以及slice的容量。长度是下标操作的上界，如x[i]中i必须小于长度。容量是分割操作的上界，如x[i:j]中j不能大于容量。</p>\n<p><img src=\"https://raw.githubusercontent.com/gods-view/images/master/image20201201174947.png\"></p>\n<p>数组的slice并不会实际复制一份数据，它只是创建一个新的数据结构，包含了另外的一个指针，一个长度和一个容量数据。 如同分割一个字符串，分割数组也不涉及复制操作：它只是新建了一个结构来放置一个不同的指针，长度和容量。在例子中，对[]int{2,3,5,7,11}求值操作会创建一个包含五个值的数组，并设置x的属性来描述这个数组。分割表达式x[1:3]并不分配更多的数据：它只是写了一个新的slice结构的属性来引用相同的存储数据。在例子中，长度为2–只有y[0]和y[1]是有效的索引，但是容量为4–y[0:4]是一个有效的分割表达式。</p>\n<p>由于slice是不同于指针的多字长结构，分割操作并不需要分配内存，甚至没有通常被保存在堆中的slice头部。这种表示方法使slice操作和在C中传递指针、长度对一样廉价。Go语言最初使用一个指向以上结构的指针来表示slice，但是这样做意味着每个slice操作都会分配一块新的内存对象。即使使用了快速的分配器，还是给垃圾收集器制造了很多没有必要的工作。移除间接引用及分配操作可以让slice足够廉价，以避免传递显式索引。</p>\n<h2 id=\"4-map的实现\"><a href=\"#4-map的实现\" class=\"headerlink\" title=\"4. map的实现\"></a>4. map的实现</h2><p>Go中的map在底层是用哈希表实现的，你可以在 $GOROOT/src/pkg/runtime/hashmap.goc 找到它的实现。</p>\n<h3 id=\"4-1-数据结构\"><a href=\"#4-1-数据结构\" class=\"headerlink\" title=\"4.1 数据结构\"></a>4.1 数据结构</h3><p>哈希表的数据结构中一些关键的域如下所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> Hmap</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">uint8</span>   B;    <span class=\"comment\">// 可以容纳2^B个项</span></span><br><span class=\"line\">    <span class=\"type\">uint16</span>  bucketsize;   <span class=\"comment\">// 每个桶的大小</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">byte</span>    *buckets;     <span class=\"comment\">// 2^B个Buckets的数组</span></span><br><span class=\"line\">    <span class=\"type\">byte</span>    *oldbuckets;  <span class=\"comment\">// 前一个buckets，只有当正在扩容时才不为空</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面给出的结构体只是Hmap的部分的域。需要注意到的是，这里直接使用的是Bucket的数组，而不是Bucket*指针的数组。这意味着，第一个Bucket和后面溢出链的Bucket分配有些不同。第一个Bucket是用的一段连续的内存空间，而后面溢出链的Bucket的空间是使用mallocgc分配的。</p>\n<p>这个hash结构使用的是一个可扩展哈希的算法，由hash值mod当前hash表大小决定某一个值属于哪个桶，而hash表大小是2的指数，即上面结构体中的2^B。每次扩容，会增大到上次大小的两倍。结构体中有一个buckets和一个oldbuckets是用来实现增量扩容的。正常情况下直接使用buckets，而oldbuckets为空。如果当前哈希表正在扩容中，则oldbuckets不为空，并且buckets大小是oldbuckets大小的两倍。</p>\n<p>具体的Bucket结构如下所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> Bucket</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">uint8</span>  tophash[BUCKETSIZE]; <span class=\"comment\">// hash值的高8位....低位从bucket的array定位到bucket</span></span><br><span class=\"line\">    Bucket *overflow;           <span class=\"comment\">// 溢出桶链表，如果有</span></span><br><span class=\"line\">    <span class=\"type\">byte</span>   data[<span class=\"number\">1</span>];             <span class=\"comment\">// BUCKETSIZE keys followed by BUCKETSIZE values</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中BUCKETSIZE是用宏定义的8，每个bucket中存放最多8个key/value对, 如果多于8个，那么会申请一个新的bucket，并将它与之前的bucket链起来。</p>\n<p>按key的类型采用相应的hash算法得到key的hash值。将hash值的低位当作Hmap结构体中buckets数组的index，找到key所在的bucket。将hash的高8位存储在了bucket的tophash中。<strong>注意，这里高8位不是用来当作key/value在bucket内部的offset的，而是作为一个主键，在查找时对tophash数组的每一项进行顺序匹配的</strong>。先比较hash值高位与bucket的tophash[i]是否相等，如果相等则再比较bucket的第i个的key与所给的key是否相等。如果相等，则返回其对应的value，反之，在overflow buckets中按照上述方法继续寻找。</p>\n<p>整个hash的存储如下图所示(临时先采用了XX同学画的图，这个图有点问题)：</p>\n<p><img src=\"https://raw.githubusercontent.com/gods-view/images/master/imageimage-20201202173456850.png\" alt=\"image-20201202173456850\"></p>\n<p>图2.2 HMap的存储结构</p>\n<p>注意一个细节是Bucket中key/value的放置顺序，是将keys放在一起，values放在一起，为什么不将key和对应的value放在一起呢？如果那么做，存储结构将变成key1/value1/key2/value2… 设想如果是这样的一个map[int64]int8，考虑到字节对齐，会浪费很多存储空间。不得不说通过上述的一个小细节，可以看出Go在设计上的深思熟虑。</p>\n<h3 id=\"4-2-增量扩容\"><a href=\"#4-2-增量扩容\" class=\"headerlink\" title=\"4.2 增量扩容\"></a>4.2 增量扩容</h3><p>大家都知道哈希表表就是以空间换时间，访问速度是直接跟填充因子相关的，所以当哈希表太满之后就需要进行扩容。</p>\n<p>如果扩容前的哈希表大小为2^B，扩容之后的大小为2^(B+1)，每次扩容都变为原来大小的两倍，哈希表大小始终为2的指数倍，则有(hash mod 2^B)等价于(hash &amp; (2^B-1))。这样可以简化运算，避免了取余操作。</p>\n<p>假设扩容之前容量为X，扩容之后容量为Y，对于某个哈希值hash，一般情况下(hash mod X)不等于(hash mod Y)，所以扩容之后要重新计算每一项在哈希表中的新位置。当hash表扩容之后，需要将那些旧的pair重新哈希到新的table上(源代码中称之为evacuate)， 这个工作并没有在扩容之后一次性完成，而是逐步的完成（在insert和remove时每次搬移1-2个pair），Go语言使用的是增量扩容。</p>\n<p>为什么会增量扩容呢？主要是缩短map容器的响应时间。假如我们直接将map用作某个响应实时性要求非常高的web应用存储，如果不采用增量扩容，当map里面存储的元素很多之后，扩容时系统就会卡往，导致较长一段时间内无法响应请求。不过增量扩容本质上还是将总的扩容时间分摊到了每一次哈希操作上面。</p>\n<p>扩容会建立一个大小是原来2倍的新的表，将旧的bucket搬到新的表中之后，并不会将旧的bucket从oldbucket中删除，而是加上一个已删除的标记。</p>\n<p>正是由于这个工作是逐渐完成的，这样就会导致一部分数据在old table中，一部分在new table中， 所以对于hash table的insert, remove, lookup操作的处理逻辑产生影响。只有当所有的bucket都从旧表移到新表之后，才会将oldbucket释放掉。</p>\n<p>扩容的填充因子是多少呢？如果grow的太频繁，会造成空间的利用率很低， 如果很久才grow，会形成很多的overflow buckets，查找的效率也会下降。 这个平衡点如何选取呢(在go中，这个平衡点是有一个宏控制的(#define LOAD 6.5), 它的意思是这样的，如果table中元素的个数大于table中能容纳的元素的个数， 那么就触发一次grow动作。那么这个6.5是怎么得到的呢？原来这个值来源于作者的一个测试程序，遗憾的是没能找到相关的源码，不过作者给出了测试的结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       LOAD    %overflow  bytes/entry     hitprobe    missprobe</span><br><span class=\"line\">       4.00         2.13        20.77         3.00         4.00</span><br><span class=\"line\">       4.50         4.05        17.30         3.25         4.50</span><br><span class=\"line\">       5.00         6.85        14.77         3.50         5.00</span><br><span class=\"line\">       5.50        10.55        12.94         3.75         5.50</span><br><span class=\"line\">       6.00        15.27        11.67         4.00         6.00</span><br><span class=\"line\">       6.50        20.90        10.79         4.25         6.50</span><br><span class=\"line\">       7.00        27.14        10.15         4.50         7.00</span><br><span class=\"line\">       7.50        34.03         9.73         4.75         7.50</span><br><span class=\"line\">       8.00        41.10         9.40         5.00         8.00</span><br><span class=\"line\"></span><br><span class=\"line\">%overflow   = percentage of buckets which have an overflow bucket</span><br><span class=\"line\">bytes/entry = overhead bytes used per key/value pair</span><br><span class=\"line\">hitprobe    = # of entries to check when looking up a present key</span><br><span class=\"line\">missprobe   = # of entries to check when looking up an absent key</span><br></pre></td></tr></table></figure>\n\n<p>可以看出作者取了一个相对适中的值。</p>\n<h3 id=\"4-3-查找过程\"><a href=\"#4-3-查找过程\" class=\"headerlink\" title=\"4.3 查找过程\"></a>4.3 查找过程</h3><ol>\n<li>根据key计算出hash值。</li>\n<li>如果存在old table, 首先在old table中查找，如果找到的bucket已经evacuated，转到步骤3。 反之，返回其对应的value。</li>\n<li>在new table中查找对应的value。</li>\n</ol>\n<p>这里一个细节需要注意一下。不认真看可能会以为低位用于定位bucket在数组的index，那么高位就是用于key/valule在bucket内部的offset。事实上高8位不是用作offset的，而是用于加快key的比较的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do &#123; //对每个桶b</span><br><span class=\"line\">    //依次比较桶内的每一项存放的tophash与所求的hash值高位是否相等</span><br><span class=\"line\">    for(i = 0, k = b-&gt;data, v = k + h-&gt;keysize * BUCKETSIZE; i &lt; BUCKETSIZE; i++, k += h-&gt;keysize, v += h-&gt;valuesize) &#123;</span><br><span class=\"line\">        if(b-&gt;tophash[i] == top) &#123; </span><br><span class=\"line\">            k2 = IK(h, k);</span><br><span class=\"line\">            t-&gt;key-&gt;alg-&gt;equal(&amp;eq, t-&gt;key-&gt;size, key, k2);</span><br><span class=\"line\">            if(eq) &#123; //相等的情况下再去做key比较...</span><br><span class=\"line\">                *keyp = k2;</span><br><span class=\"line\">                return IV(h, v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b = b-&gt;overflow; //b设置为它的下一下溢出链</span><br><span class=\"line\">&#125; while(b != nil);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-插入过程分析\"><a href=\"#4-4-插入过程分析\" class=\"headerlink\" title=\"4.4 插入过程分析\"></a>4.4 插入过程分析</h3><ol>\n<li>根据key算出hash值，进而得出对应的bucket。</li>\n<li>如果bucket在old table中，将其重新散列到new table中。</li>\n<li>在bucket中，查找空闲的位置，如果已经存在需要插入的key，更新其对应的value。</li>\n<li>根据table中元素的个数，判断是否grow table。</li>\n<li>如果对应的bucket已经full，重新申请新的bucket作为overbucket。</li>\n<li>将key/value pair插入到bucket中。</li>\n</ol>\n<p>这里也有几个细节需要注意一下。</p>\n<p>在扩容过程中，oldbucket是被冻结的，查找时会在oldbucket中查找，但不会在oldbucket中插入数据。如果在oldbucket是找到了相应的key，做法是将它迁移到新bucket后加入evalucated标记。并且还会额外的迁移另一个pair。</p>\n<p>然后就是只要在某个bucket中找到第一个空位，就会将key/value插入到这个位置。也就是位置位于bucket前面的会覆盖后面的(类似于存储系统设计中做删除时的常用的技巧之一，直接用新数据追加方式写，新版本数据覆盖老版本数据)。找到了相同的key或者找到第一个空位就可以结束遍历了。不过这也意味着做删除时必须完全的遍历bucket所有溢出链，将所有的相同key数据都删除。所以目前map的设计是为插入而优化的，删除效率会比插入低一些。</p>\n<h3 id=\"4-5-map设计中的性能优化\"><a href=\"#4-5-map设计中的性能优化\" class=\"headerlink\" title=\"4.5 map设计中的性能优化\"></a>4.5 map设计中的性能优化</h3><p>读完map源代码发现作者还是做了很多设计上的选择的。本人水平有限，谈不上优劣的点评，这里只是拿出来与读者分享。</p>\n<p>HMap中是Bucket的数组，而不是Bucket指针的数组。好的方面是可以一次分配较大内存，减少了分配次数，避免多次调用mallocgc。但相应的缺点，其一是可扩展哈希的算法并没有发生作用，扩容时会造成对整个数组的值拷贝(如果实现上用Bucket指针的数组就是指针拷贝了，代价小很多)。其二是首个bucket与后面产生了不一致性。这个会使删除逻辑变得复杂一点。比如删除后面的溢出链可以直接删除，而对于首个bucket，要等到evalucated完毕后，整个oldbucket删除时进行。</p>\n<p>没有重用设freelist重用删除的结点。作者把这个加了一个TODO的注释，不过想了一下觉得这个做的意义不大。因为一方面，bucket大小并不一致，重用比较麻烦。另一方面，下层存储已经做过内存池的实现了，所以这里不做重用也会在内存分配那一层被重用的，</p>\n<p>bucket直接key/value和间接key/value优化。这个优化做得蛮好的。注意看代码会发现，如果key或value小于128字节，则它们的值是直接使用的bucket作为存储的。否则bucket中存储的是指向实际key/value数据的指针，</p>\n<p>bucket存8个key/value对。查找时进行顺序比较。第一次发现高位居然不是用作offset，而是用于加快比较的。定位到bucket之后，居然是一个顺序比较的查找过程。后面仔细想了想，觉得还行。由于bucket只有8个，顺序比较下来也不算过分。仍然是O(1)只不过前面系数大一点点罢了。相当于hash到一个小范围之后，在这个小范围内顺序查找。</p>\n<p>插入删除的优化。前面已经提过了，插入只要找到相同的key或者第一个空位，bucket中如果存在一个以上的相同key，前面覆盖后面的(只是如果，实际上不会发生)。而删除就需要遍历完所有bucket溢出链了。这样map的设计就是为插入优化的。考虑到一般的应用场景，这个应该算是很合理的。</p>\n<h2 id=\"5-nil类型\"><a href=\"#5-nil类型\" class=\"headerlink\" title=\"5. nil类型\"></a>5. nil类型</h2><p>什么？nil是一种数据结构么？为什么会讲到它，没搞错吧？没搞错。不仅仅是Go语言中，每门语言中nil都是非常重要的，它代表的是空值的语义。</p>\n<p>在不同语言中，表示空这个概念都有细微不同。比如在scheme语言(一种lisp方言)中，nil是true的！而在ruby语言中，一切都是对象，连nil也是一个对象！在C中NULL跟0是等价的。</p>\n<p>按照Go语言规范，任何类型在未初始化时都对应一个零值：布尔类型是false，整型是0，字符串是””，而指针，函数，interface，slice，channel和map的零值都是nil。</p>\n<h3 id=\"5-1-interface\"><a href=\"#5-1-interface\" class=\"headerlink\" title=\"5.1 interface\"></a>5.1 interface</h3><p>一个interface在没有进行初始化时，对应的值是nil。也就是说<code>var v interface&#123;&#125;</code>，</p>\n<p>此时v就是一个nil。在底层存储上，它是一个空指针。与之不同的情况是，interface值为空。比如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v *T</span><br><span class=\"line\"><span class=\"keyword\">var</span> i <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">i = v</span><br></pre></td></tr></table></figure>\n\n<p>此时i是一个interface，它的值是nil，但它自身不为nil。</p>\n<p>Go中的error其实就是一个实现了Error方法的接口：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">error</span> <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Error() <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此，我们可以自定义一个error：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Error <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    errCode <span class=\"type\">uint8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *Error)</span></span> Error() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> e.errCode &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;file not found&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;time out&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;permission denied&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;unknown error&quot;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们这样使用它：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">checkError</span><span class=\"params\">(err <span class=\"type\">error</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> e *Error</span><br><span class=\"line\">checkError(e)</span><br></pre></td></tr></table></figure>\n\n<p>e是nil的，但是当我们checkError时就会panic。请读者思考一下为什么？</p>\n<p>总之，interface跟C语言的指针一样非常灵活，关于空的语义，也跟空指针一样容易困扰新手的，需要注意。</p>\n<h3 id=\"5-2-string和slice\"><a href=\"#5-2-string和slice\" class=\"headerlink\" title=\"5.2 string和slice\"></a>5.2 string和slice</h3><p>string的空值是””，它是不能跟nil比较的。即使是空的string，它的大小也是两个机器字长的。slice也类似，它的空值并不是一个空指针，而是结构体中的指针域为空，空的slice的大小也是三个机器字长的。</p>\n<h3 id=\"5-3-channel和map\"><a href=\"#5-3-channel和map\" class=\"headerlink\" title=\"5.3 channel和map\"></a>5.3 channel和map</h3><p>channel跟string或slice有些不同，它在栈上只是一个指针，实际的数据都是由指针所指向的堆上面。</p>\n<p>跟channel相关的操作有：初始化/读/写/关闭。channel未初始化值就是nil，未初始化的channel是不能使用的。下面是一些操作规则：</p>\n<ul>\n<li>读或者写一个nil的channel的操作会永远阻塞。</li>\n<li>读一个关闭的channel会立刻返回一个channel元素类型的零值。</li>\n<li>写一个关闭的channel会导致panic。</li>\n</ul>\n<p>map也是指针，实际数据在堆中，未初始化的值是nil。</p>\n","site":{"data":{}},"length":8005,"excerpt":"<h2 id=\"1-结构体和指针\"><a href=\"#1-结构体和指针\" class=\"headerlink\" title=\"1. 结构体和指针\"></a>1. 结构体和指针</h2><p>与C相同而与Java不同的是，Go语言让程序员决定何时使用指针。举例来说，这种类型定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Point <span class=\"keyword\">struct</span> &#123; X, Y <span class=\"type\">int</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>先来定义一个简单的struct类型，名为Point，表示内存中两个相邻的整数。</p>\n<p><img src=\"https://raw.githubusercontent.com/gods-view/images/master/imageimage-20201202173141496.png\" alt=\"image-20201202173141496\"></p>\n<p><code>Point&#123;10,20&#125;</code>表示一个已初始化的Point类型。对它进行取地址表示一个指向刚刚分配和初始化的Point类型的指针。前者在内存中是两个词，而后者是一个指向两个词的指针。</p>\n<p>结构体的域在内存中是紧挨着排列的。</p>","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Rect1 <span class=\"keyword\">struct</span> &#123; Min, Max Point &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Rect2 <span class=\"keyword\">struct</span> &#123; Min, Max *Point &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/gods-view/images/master/imageimage-20201202173244021.png\" alt=\"image-20201202173244021\"></p>\n<p>Rect1是一个具有两个Point类型属性的结构体，由在一行的两个Point–四个int代表。Rect2是一个具有两个<code>*Point</code>类型属性的结构体，由两个*Point表示。</p>\n<p>使用过C的程序员可能对<code>Point</code>和<code>*Point</code>的不同毫不见怪，但用惯Java或Python的程序员们可能就不那么轻松了。Go语言给了程序员基本内存层面的控制，由此提供了诸多能力，如控制给定数据结构集合的总大小、内存分配的次数、内存访问模式以及建立优秀系统的所有要点。</p>\n<h2 id=\"2-字符串\"><a href=\"#2-字符串\" class=\"headerlink\" title=\"2. 字符串\"></a>2. 字符串</h2><p>有了前面的准备，我们就可以开始研究更有趣的数据类型了。</p>\n<p><img src=\"https://raw.githubusercontent.com/gods-view/images/master/imageimage-20201202173305713.png\" alt=\"image-20201202173305713\"></p>\n<p>（灰色的箭头表示已经实现的但不能直接可见的指针）</p>\n<p>字符串在Go语言内存模型中用一个2字长的数据结构表示。它包含一个指向字符串存储数据的指针和一个长度数据。因为string类型是不可变的，对于多字符串共享同一个存储数据是安全的。切分操作<code>str[i:j]</code>会得到一个新的2字长结构，一个可能不同的但仍指向同一个字节序列(即上文说的存储数据)的指针和长度数据。这意味着字符串切分可以在不涉及内存分配或复制操作。这使得字符串切分的效率等同于传递下标。</p>\n<p>（说句题外话，在Java和其他语言里有一个有名的“疑难杂症”：在你分割字符串并保存时，对于源字符串的引用在内存中仍然保存着完整的原始字符串–即使只有一小部分仍被需要，Go也有这个“毛病”。另一方面，我们努力但又失败了的是，让字符串分割操作变得昂贵–包含一次分配和一次复制。在大多数程序中都避免了这么做。）</p>\n<h2 id=\"3-slice\"><a href=\"#3-slice\" class=\"headerlink\" title=\"3. slice\"></a>3. slice</h2><blockquote>\n<p>切片拥有 <strong>长度</strong> 和 <strong>容量</strong>。</p>\n<p>切片的长度就是它所包含的元素个数。</p>\n<p>切片的容量是从它的第一个元素开始数，到其底层数组元素末尾的个数。</p>\n<p>切片 s 的长度和容量可通过表达式<code> len(s)</code> 和 <code>cap(s)</code> 来获取。</p>\n</blockquote>\n<hr>\n<p>一个slice是一个数组某个部分的引用。在内存中，它是一个包含3个域的结构体：指向slice中第一个元素的指针，slice的长度，以及slice的容量。长度是下标操作的上界，如x[i]中i必须小于长度。容量是分割操作的上界，如x[i:j]中j不能大于容量。</p>\n<p><img src=\"https://raw.githubusercontent.com/gods-view/images/master/image20201201174947.png\"></p>\n<p>数组的slice并不会实际复制一份数据，它只是创建一个新的数据结构，包含了另外的一个指针，一个长度和一个容量数据。 如同分割一个字符串，分割数组也不涉及复制操作：它只是新建了一个结构来放置一个不同的指针，长度和容量。在例子中，对[]int{2,3,5,7,11}求值操作会创建一个包含五个值的数组，并设置x的属性来描述这个数组。分割表达式x[1:3]并不分配更多的数据：它只是写了一个新的slice结构的属性来引用相同的存储数据。在例子中，长度为2–只有y[0]和y[1]是有效的索引，但是容量为4–y[0:4]是一个有效的分割表达式。</p>\n<p>由于slice是不同于指针的多字长结构，分割操作并不需要分配内存，甚至没有通常被保存在堆中的slice头部。这种表示方法使slice操作和在C中传递指针、长度对一样廉价。Go语言最初使用一个指向以上结构的指针来表示slice，但是这样做意味着每个slice操作都会分配一块新的内存对象。即使使用了快速的分配器，还是给垃圾收集器制造了很多没有必要的工作。移除间接引用及分配操作可以让slice足够廉价，以避免传递显式索引。</p>\n<h2 id=\"4-map的实现\"><a href=\"#4-map的实现\" class=\"headerlink\" title=\"4. map的实现\"></a>4. map的实现</h2><p>Go中的map在底层是用哈希表实现的，你可以在 $GOROOT/src/pkg/runtime/hashmap.goc 找到它的实现。</p>\n<h3 id=\"4-1-数据结构\"><a href=\"#4-1-数据结构\" class=\"headerlink\" title=\"4.1 数据结构\"></a>4.1 数据结构</h3><p>哈希表的数据结构中一些关键的域如下所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> Hmap</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">uint8</span>   B;    <span class=\"comment\">// 可以容纳2^B个项</span></span><br><span class=\"line\">    <span class=\"type\">uint16</span>  bucketsize;   <span class=\"comment\">// 每个桶的大小</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">byte</span>    *buckets;     <span class=\"comment\">// 2^B个Buckets的数组</span></span><br><span class=\"line\">    <span class=\"type\">byte</span>    *oldbuckets;  <span class=\"comment\">// 前一个buckets，只有当正在扩容时才不为空</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面给出的结构体只是Hmap的部分的域。需要注意到的是，这里直接使用的是Bucket的数组，而不是Bucket*指针的数组。这意味着，第一个Bucket和后面溢出链的Bucket分配有些不同。第一个Bucket是用的一段连续的内存空间，而后面溢出链的Bucket的空间是使用mallocgc分配的。</p>\n<p>这个hash结构使用的是一个可扩展哈希的算法，由hash值mod当前hash表大小决定某一个值属于哪个桶，而hash表大小是2的指数，即上面结构体中的2^B。每次扩容，会增大到上次大小的两倍。结构体中有一个buckets和一个oldbuckets是用来实现增量扩容的。正常情况下直接使用buckets，而oldbuckets为空。如果当前哈希表正在扩容中，则oldbuckets不为空，并且buckets大小是oldbuckets大小的两倍。</p>\n<p>具体的Bucket结构如下所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> Bucket</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">uint8</span>  tophash[BUCKETSIZE]; <span class=\"comment\">// hash值的高8位....低位从bucket的array定位到bucket</span></span><br><span class=\"line\">    Bucket *overflow;           <span class=\"comment\">// 溢出桶链表，如果有</span></span><br><span class=\"line\">    <span class=\"type\">byte</span>   data[<span class=\"number\">1</span>];             <span class=\"comment\">// BUCKETSIZE keys followed by BUCKETSIZE values</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中BUCKETSIZE是用宏定义的8，每个bucket中存放最多8个key/value对, 如果多于8个，那么会申请一个新的bucket，并将它与之前的bucket链起来。</p>\n<p>按key的类型采用相应的hash算法得到key的hash值。将hash值的低位当作Hmap结构体中buckets数组的index，找到key所在的bucket。将hash的高8位存储在了bucket的tophash中。<strong>注意，这里高8位不是用来当作key/value在bucket内部的offset的，而是作为一个主键，在查找时对tophash数组的每一项进行顺序匹配的</strong>。先比较hash值高位与bucket的tophash[i]是否相等，如果相等则再比较bucket的第i个的key与所给的key是否相等。如果相等，则返回其对应的value，反之，在overflow buckets中按照上述方法继续寻找。</p>\n<p>整个hash的存储如下图所示(临时先采用了XX同学画的图，这个图有点问题)：</p>\n<p><img src=\"https://raw.githubusercontent.com/gods-view/images/master/imageimage-20201202173456850.png\" alt=\"image-20201202173456850\"></p>\n<p>图2.2 HMap的存储结构</p>\n<p>注意一个细节是Bucket中key/value的放置顺序，是将keys放在一起，values放在一起，为什么不将key和对应的value放在一起呢？如果那么做，存储结构将变成key1/value1/key2/value2… 设想如果是这样的一个map[int64]int8，考虑到字节对齐，会浪费很多存储空间。不得不说通过上述的一个小细节，可以看出Go在设计上的深思熟虑。</p>\n<h3 id=\"4-2-增量扩容\"><a href=\"#4-2-增量扩容\" class=\"headerlink\" title=\"4.2 增量扩容\"></a>4.2 增量扩容</h3><p>大家都知道哈希表表就是以空间换时间，访问速度是直接跟填充因子相关的，所以当哈希表太满之后就需要进行扩容。</p>\n<p>如果扩容前的哈希表大小为2^B，扩容之后的大小为2^(B+1)，每次扩容都变为原来大小的两倍，哈希表大小始终为2的指数倍，则有(hash mod 2^B)等价于(hash &amp; (2^B-1))。这样可以简化运算，避免了取余操作。</p>\n<p>假设扩容之前容量为X，扩容之后容量为Y，对于某个哈希值hash，一般情况下(hash mod X)不等于(hash mod Y)，所以扩容之后要重新计算每一项在哈希表中的新位置。当hash表扩容之后，需要将那些旧的pair重新哈希到新的table上(源代码中称之为evacuate)， 这个工作并没有在扩容之后一次性完成，而是逐步的完成（在insert和remove时每次搬移1-2个pair），Go语言使用的是增量扩容。</p>\n<p>为什么会增量扩容呢？主要是缩短map容器的响应时间。假如我们直接将map用作某个响应实时性要求非常高的web应用存储，如果不采用增量扩容，当map里面存储的元素很多之后，扩容时系统就会卡往，导致较长一段时间内无法响应请求。不过增量扩容本质上还是将总的扩容时间分摊到了每一次哈希操作上面。</p>\n<p>扩容会建立一个大小是原来2倍的新的表，将旧的bucket搬到新的表中之后，并不会将旧的bucket从oldbucket中删除，而是加上一个已删除的标记。</p>\n<p>正是由于这个工作是逐渐完成的，这样就会导致一部分数据在old table中，一部分在new table中， 所以对于hash table的insert, remove, lookup操作的处理逻辑产生影响。只有当所有的bucket都从旧表移到新表之后，才会将oldbucket释放掉。</p>\n<p>扩容的填充因子是多少呢？如果grow的太频繁，会造成空间的利用率很低， 如果很久才grow，会形成很多的overflow buckets，查找的效率也会下降。 这个平衡点如何选取呢(在go中，这个平衡点是有一个宏控制的(#define LOAD 6.5), 它的意思是这样的，如果table中元素的个数大于table中能容纳的元素的个数， 那么就触发一次grow动作。那么这个6.5是怎么得到的呢？原来这个值来源于作者的一个测试程序，遗憾的是没能找到相关的源码，不过作者给出了测试的结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       LOAD    %overflow  bytes/entry     hitprobe    missprobe</span><br><span class=\"line\">       4.00         2.13        20.77         3.00         4.00</span><br><span class=\"line\">       4.50         4.05        17.30         3.25         4.50</span><br><span class=\"line\">       5.00         6.85        14.77         3.50         5.00</span><br><span class=\"line\">       5.50        10.55        12.94         3.75         5.50</span><br><span class=\"line\">       6.00        15.27        11.67         4.00         6.00</span><br><span class=\"line\">       6.50        20.90        10.79         4.25         6.50</span><br><span class=\"line\">       7.00        27.14        10.15         4.50         7.00</span><br><span class=\"line\">       7.50        34.03         9.73         4.75         7.50</span><br><span class=\"line\">       8.00        41.10         9.40         5.00         8.00</span><br><span class=\"line\"></span><br><span class=\"line\">%overflow   = percentage of buckets which have an overflow bucket</span><br><span class=\"line\">bytes/entry = overhead bytes used per key/value pair</span><br><span class=\"line\">hitprobe    = # of entries to check when looking up a present key</span><br><span class=\"line\">missprobe   = # of entries to check when looking up an absent key</span><br></pre></td></tr></table></figure>\n\n<p>可以看出作者取了一个相对适中的值。</p>\n<h3 id=\"4-3-查找过程\"><a href=\"#4-3-查找过程\" class=\"headerlink\" title=\"4.3 查找过程\"></a>4.3 查找过程</h3><ol>\n<li>根据key计算出hash值。</li>\n<li>如果存在old table, 首先在old table中查找，如果找到的bucket已经evacuated，转到步骤3。 反之，返回其对应的value。</li>\n<li>在new table中查找对应的value。</li>\n</ol>\n<p>这里一个细节需要注意一下。不认真看可能会以为低位用于定位bucket在数组的index，那么高位就是用于key/valule在bucket内部的offset。事实上高8位不是用作offset的，而是用于加快key的比较的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do &#123; //对每个桶b</span><br><span class=\"line\">    //依次比较桶内的每一项存放的tophash与所求的hash值高位是否相等</span><br><span class=\"line\">    for(i = 0, k = b-&gt;data, v = k + h-&gt;keysize * BUCKETSIZE; i &lt; BUCKETSIZE; i++, k += h-&gt;keysize, v += h-&gt;valuesize) &#123;</span><br><span class=\"line\">        if(b-&gt;tophash[i] == top) &#123; </span><br><span class=\"line\">            k2 = IK(h, k);</span><br><span class=\"line\">            t-&gt;key-&gt;alg-&gt;equal(&amp;eq, t-&gt;key-&gt;size, key, k2);</span><br><span class=\"line\">            if(eq) &#123; //相等的情况下再去做key比较...</span><br><span class=\"line\">                *keyp = k2;</span><br><span class=\"line\">                return IV(h, v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b = b-&gt;overflow; //b设置为它的下一下溢出链</span><br><span class=\"line\">&#125; while(b != nil);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-插入过程分析\"><a href=\"#4-4-插入过程分析\" class=\"headerlink\" title=\"4.4 插入过程分析\"></a>4.4 插入过程分析</h3><ol>\n<li>根据key算出hash值，进而得出对应的bucket。</li>\n<li>如果bucket在old table中，将其重新散列到new table中。</li>\n<li>在bucket中，查找空闲的位置，如果已经存在需要插入的key，更新其对应的value。</li>\n<li>根据table中元素的个数，判断是否grow table。</li>\n<li>如果对应的bucket已经full，重新申请新的bucket作为overbucket。</li>\n<li>将key/value pair插入到bucket中。</li>\n</ol>\n<p>这里也有几个细节需要注意一下。</p>\n<p>在扩容过程中，oldbucket是被冻结的，查找时会在oldbucket中查找，但不会在oldbucket中插入数据。如果在oldbucket是找到了相应的key，做法是将它迁移到新bucket后加入evalucated标记。并且还会额外的迁移另一个pair。</p>\n<p>然后就是只要在某个bucket中找到第一个空位，就会将key/value插入到这个位置。也就是位置位于bucket前面的会覆盖后面的(类似于存储系统设计中做删除时的常用的技巧之一，直接用新数据追加方式写，新版本数据覆盖老版本数据)。找到了相同的key或者找到第一个空位就可以结束遍历了。不过这也意味着做删除时必须完全的遍历bucket所有溢出链，将所有的相同key数据都删除。所以目前map的设计是为插入而优化的，删除效率会比插入低一些。</p>\n<h3 id=\"4-5-map设计中的性能优化\"><a href=\"#4-5-map设计中的性能优化\" class=\"headerlink\" title=\"4.5 map设计中的性能优化\"></a>4.5 map设计中的性能优化</h3><p>读完map源代码发现作者还是做了很多设计上的选择的。本人水平有限，谈不上优劣的点评，这里只是拿出来与读者分享。</p>\n<p>HMap中是Bucket的数组，而不是Bucket指针的数组。好的方面是可以一次分配较大内存，减少了分配次数，避免多次调用mallocgc。但相应的缺点，其一是可扩展哈希的算法并没有发生作用，扩容时会造成对整个数组的值拷贝(如果实现上用Bucket指针的数组就是指针拷贝了，代价小很多)。其二是首个bucket与后面产生了不一致性。这个会使删除逻辑变得复杂一点。比如删除后面的溢出链可以直接删除，而对于首个bucket，要等到evalucated完毕后，整个oldbucket删除时进行。</p>\n<p>没有重用设freelist重用删除的结点。作者把这个加了一个TODO的注释，不过想了一下觉得这个做的意义不大。因为一方面，bucket大小并不一致，重用比较麻烦。另一方面，下层存储已经做过内存池的实现了，所以这里不做重用也会在内存分配那一层被重用的，</p>\n<p>bucket直接key/value和间接key/value优化。这个优化做得蛮好的。注意看代码会发现，如果key或value小于128字节，则它们的值是直接使用的bucket作为存储的。否则bucket中存储的是指向实际key/value数据的指针，</p>\n<p>bucket存8个key/value对。查找时进行顺序比较。第一次发现高位居然不是用作offset，而是用于加快比较的。定位到bucket之后，居然是一个顺序比较的查找过程。后面仔细想了想，觉得还行。由于bucket只有8个，顺序比较下来也不算过分。仍然是O(1)只不过前面系数大一点点罢了。相当于hash到一个小范围之后，在这个小范围内顺序查找。</p>\n<p>插入删除的优化。前面已经提过了，插入只要找到相同的key或者第一个空位，bucket中如果存在一个以上的相同key，前面覆盖后面的(只是如果，实际上不会发生)。而删除就需要遍历完所有bucket溢出链了。这样map的设计就是为插入优化的。考虑到一般的应用场景，这个应该算是很合理的。</p>\n<h2 id=\"5-nil类型\"><a href=\"#5-nil类型\" class=\"headerlink\" title=\"5. nil类型\"></a>5. nil类型</h2><p>什么？nil是一种数据结构么？为什么会讲到它，没搞错吧？没搞错。不仅仅是Go语言中，每门语言中nil都是非常重要的，它代表的是空值的语义。</p>\n<p>在不同语言中，表示空这个概念都有细微不同。比如在scheme语言(一种lisp方言)中，nil是true的！而在ruby语言中，一切都是对象，连nil也是一个对象！在C中NULL跟0是等价的。</p>\n<p>按照Go语言规范，任何类型在未初始化时都对应一个零值：布尔类型是false，整型是0，字符串是””，而指针，函数，interface，slice，channel和map的零值都是nil。</p>\n<h3 id=\"5-1-interface\"><a href=\"#5-1-interface\" class=\"headerlink\" title=\"5.1 interface\"></a>5.1 interface</h3><p>一个interface在没有进行初始化时，对应的值是nil。也就是说<code>var v interface&#123;&#125;</code>，</p>\n<p>此时v就是一个nil。在底层存储上，它是一个空指针。与之不同的情况是，interface值为空。比如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v *T</span><br><span class=\"line\"><span class=\"keyword\">var</span> i <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">i = v</span><br></pre></td></tr></table></figure>\n\n<p>此时i是一个interface，它的值是nil，但它自身不为nil。</p>\n<p>Go中的error其实就是一个实现了Error方法的接口：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">error</span> <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Error() <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此，我们可以自定义一个error：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Error <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    errCode <span class=\"type\">uint8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *Error)</span></span> Error() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> e.errCode &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;file not found&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;time out&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;permission denied&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;unknown error&quot;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们这样使用它：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">checkError</span><span class=\"params\">(err <span class=\"type\">error</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> e *Error</span><br><span class=\"line\">checkError(e)</span><br></pre></td></tr></table></figure>\n\n<p>e是nil的，但是当我们checkError时就会panic。请读者思考一下为什么？</p>\n<p>总之，interface跟C语言的指针一样非常灵活，关于空的语义，也跟空指针一样容易困扰新手的，需要注意。</p>\n<h3 id=\"5-2-string和slice\"><a href=\"#5-2-string和slice\" class=\"headerlink\" title=\"5.2 string和slice\"></a>5.2 string和slice</h3><p>string的空值是””，它是不能跟nil比较的。即使是空的string，它的大小也是两个机器字长的。slice也类似，它的空值并不是一个空指针，而是结构体中的指针域为空，空的slice的大小也是三个机器字长的。</p>\n<h3 id=\"5-3-channel和map\"><a href=\"#5-3-channel和map\" class=\"headerlink\" title=\"5.3 channel和map\"></a>5.3 channel和map</h3><p>channel跟string或slice有些不同，它在栈上只是一个指针，实际的数据都是由指针所指向的堆上面。</p>\n<p>跟channel相关的操作有：初始化/读/写/关闭。channel未初始化值就是nil，未初始化的channel是不能使用的。下面是一些操作规则：</p>\n<ul>\n<li>读或者写一个nil的channel的操作会永远阻塞。</li>\n<li>读一个关闭的channel会立刻返回一个channel元素类型的零值。</li>\n<li>写一个关闭的channel会导致panic。</li>\n</ul>\n<p>map也是指针，实际数据在堆中，未初始化的值是nil。</p>"},{"title":"Protobuf入门","comments":1,"keywords":"博客文章密码","message":"输入密码，查看文章","abbrlink":"638e39a5","date":"2022-08-19T05:46:17.000Z","password":null,"abstract":null,"_content":"\n# 什么是Protobuf\n\n---\n\n在网络通信和通用数据交换等应用场景中经常使用的技术是 JSON 或 XML，还有一种类型Protobuf。\n\nProtobuf是Protocol Buffers的简称，它是Google出品的性能优异、跨语言、跨平台的序列化库，用于描述一种轻便高效的结构化数据存储格式，并于2008年对外开源。Protobuf可以用于结构化数据串行化，或者说序列化。它的设计非常适用于在网络通讯中的数据载体，很适合做数据存储或 RPC 数据交换格式，它序列化出来的数据量少再加上以 K-V 的方式来存储数据，对消息的版本兼容性非常强，可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。开发者可以通过 ProtoBuf 定义数据结构，然后通过 ProtoBuf 工具生成各种语言版本的数据结构类库，用于操作 ProtoBuf 协议数据\n\nProtobuf是一种语言无关、平台无关、可扩展的序列化结构数据的方法，它可用于（数据）通信协议、数据存储等。\n\nProtocol Buffers 是一种灵活，高效，自动化机制的结构数据序列化方法－可类比 XML，但是比 XML 更小（3 ~ 10倍）、更快（20 ~ 100倍）、更为简单。json、xml都是基于文本格式，protobuf是二进制格式。\n\nProtobuf中最基本的数据单元是message，是类似Go语言中结构体的存在。在message中可以嵌套message或其它的基础数据类型的成员。\n\n> 序列化(serialization、marshalling)的过程是指将数据结构或者对象的状态转换成可以存储(比如文件、内存)或者传输的格式(比如网络)。反向操作就是反序列化(deserialization、unmarshalling)的过程。\n\n![image-20220818145636178](https://raw.githubusercontent.com/gods-view/images/master/imageimage-20220818145636178.png)\n\n# 定义Message\n\n---\n\n使用 ProtoBuf ，首先需要通过 ProtoBuf 语法定义数据结构(消息)，这些定义好的数据结构保存在.proto为后缀的文件中。\n\n## 字段类型与字段编号\n\n```protobuf\n// 指定protobuf的版本，proto3是最新的语法版本，如果省略protocol buffer编译器默认使用proto2语法。他必须是文件中非空非注释行的第一行\nsyntax = \"proto3\";\n// package 定义proto的包名，包名可以避免对message 类型之间的名字冲突，同名的Message可以通过package进行区分。\n\n// 在没有为特定语言定义option xxx_package的时候，它还可以用来生成特定语言的包名，比如Java package, go package。\n\nmessage Request {\n  string userId = 1;   // 定义一个string类型的字段，字段名字为userId, 序号为1\n  int32 operation = 2;   // 定义一个int32类型的字段，字段名字为operation, 序号为2\n}\n\n// 定义数据结构，message 你可以想象成Go语言中的struct\nmessage Response {\n  string data = 1;   // 定义一个string类型的字段，字段名字为data, 序号为1\n  int32 status = 2;   // 定义一个int32类型的字段，字段名字为status, 序号为2\n}\n\n// 还可以给字段指定复合类型，包括枚举类型和其他message类型\n```\n\n字段是以`[ \"repeated\" ] type fieldName \"=\" fieldNumber [ \"[\" fieldOptions \"]\" ] \";\"`格式定义的。这个例子是一个简单的例子，采用了`type fieldName \"=\" fieldNumber`格式定义的。\n\n比如第一个字段userId, 首先是它的类型`string`，其次是字段的名称，然后是等号`=`, 之后是字段的序号，然后是分号。\n\n复杂的结构，前面可以定义为`repeated`, 序号之后可以定义一些可选项。\n\n这是普通的字段定义，当然还有一些复杂的一些字段定义，比如`Oneof`、`Map`、`Reserved`、`enum`定义，下一节我们再详细讲。\n\n> 在message定义中每个字段都有一个唯一的编号，这些编号被用来在二进制消息体中识别你定义的这些字段，一旦你的message类型被用到后就不应该在修改这些编号了。注意在将message编码成二进制消息体时字段编号1-15将会占用1个字节，16-2047将占用两个字节。所以在一些频繁使用用的message中，你应该总是先使用前面1-15字段编号。\n>\n> 你可以指定的最小编号是1，最大是2E29 - 1（536,870,911）。其中19000到19999是给protocol buffers实现保留的字段标号，定义message时不能使用。\n\n### 保留字段\n\n当你删掉或者注释掉message中的一个字段时，未来其他开发者在更新message定义时就可以重用之前的字段编号。如果他们意外载入了老版本的`.proto`文件将会导致严重的问题，比如数据损坏、隐私泄露等。一种避免问题发生的方式是指定保留的字段编号和字段名称。如果未来有人用了这些字段标识那么在编译时protocol buffer的编译器会报错。\n\n```protobuf\nmessage Foo {\n  reserved 2, 15, 9 to 11;  // 保留字段\n  reserved \"foo\", \"bar\";\n}\n```\n\n### Optional的字段和默认值\n\n如上所述，消息描述中的一个元素可以被标记为“可选的”（optional）。一个格式良好的消息可以包含0个或一个optional的元素。当解 析消息时，如果它不包含optional的元素值，那么解析出来的对象中的对应字段就被置为默认值。默认值可以在消息描述文件中指定。例如，要为 *SearchRequest*消息的*result_per_page*字段指定默认值10，在定义消息格式时如下所示：\n\n```protobuf\noptional int32 result_per_page = 3 [default = 10];\n```\n\n如果没有为optional的元素指定默认值，就会使用与特定类型相关的默认值：对string来说，默认值是空字符串。对bool来说，默认值是false。对数值类型来说，默认值是0。对枚举来说，默认值是枚举类型定义中的第一个值。\n\n### 枚举\n\n当需要定义一个消息类型的时候，可能想为一个字段指定某“预定义值序列”中的一个值。例如，假设要为每一个SearchRequest消息添加一个 corpus字段，而corpus的值可能是UNIVERSAL，WEB，IMAGES，LOCAL，NEWS，PRODUCTS或VIDEO中的一个。 其实可以很容易地实现这一点：通过向消息定义中添加一个枚举（enum）就可以了。一个enum类型的字段只能用指定的常量集中的一个值作为其值（如果尝 试指定不同的值，解析器就会把它当作一个未知的字段来对待）。在下面的例子中，在消息格式中添加了一个叫做Corpus的枚举类型——它含有所有可能的值 ——以及一个类型为Corpus的字段：\n\n```protobuf\nmessage SearchRequest {\n  required string query = 1;\n  optional int32 page_number = 2;\n  optional int32 result_per_page = 3 [default = 10];\n  enum Corpus {\n    UNIVERSAL = 0;\n    WEB = 1;\n    IMAGES = 2;\n    LOCAL = 3;\n    NEWS = 4;\n    PRODUCTS = 5;\n    VIDEO = 6;\n  }\n  optional Corpus corpus = 4 [default = UNIVERSAL];\n}\n```\n\n你可以为枚举常量定义别名。 需要设置allow_alias option 为 true, 否则 protocol编译器会产生错误信息。\n\n```protobuf\nenum EnumAllowingAlias {\n  option allow_alias = true;\n  UNKNOWN = 0; // 枚举类型的第一个选项的标识符必须是0，这也是枚举类型的默认值。\n  STARTED = 1;\n  RUNNING = 1; // 如果设置allow_alias，允许字段编号重复，RUNNING是STARTED的别名。\n}\nenum EnumNotAllowingAlias {\n  UNKNOWN2 = 0;\n  STARTED2 = 1;\n  // RUNNING = 1;  // Uncommenting this line will cause a compile error inside Google and a warning message outside.\n}\n```\n\n枚举常量必须在32位整型值的范围内。因为enum值是使用可变编码方式的，对负数不够高效，因此不推荐在enum中使用负数。如上例所示，可以在 一个消息定义的内部或外部定义枚举——这些枚举可以在.proto文件中的任何消息定义里重用。当然也可以在一个消息中声明一个枚举类型，而在另一个不同 的消息中使用它——采用MessageType.EnumType的语法格式。\n\n当对一个使用了枚举的.proto文件运行protocol buffer编译器的时候，生成的代码中将有一个对应的enum（对Java或C++来说），或者一个特殊的EnumDescriptor类（对 Python来说），它被用来在运行时生成的类中创建一系列的整型值符号常量（symbolic constants）。\n\n注意枚举类型的定义采用C++ scoping规则，也就是枚举值是枚举类型的兄弟类型，而不是子类型，所以避免在同一个package定义重名的枚举字段。\n\n### Oneof\n\n如果你有一组字段，同时最多允许这一组中的一个字段出现，就可以使用`Oneof`定义这一组字段，这有点Union的意思，但是Oneof允许你设置零各值。\n\n因为proto3没有办法区分正常的值是否是设置了还是取得缺省值(比如int64类型字段，如果它的值是0，你无法判断数据是否包含这个字段，因为0几可能是数据中设置的值，也可能是这个字段的零值)，所以你可以通过Oneof取得这个功能，因为Oneof有判断字段是否设置的功能。\n\n```protobuf\nsyntax = \"proto3\";\n\npackage abc;\n\nmessage OneofMessage {\n    oneof test_oneof {\n      string name = 4;\n      int64 value = 9;\n    }\n  }\n```\n\n`oneof`字段不能同时使用`repeated`。\n\n### map类型\n\nmap类型需要设置键和值的类型，格式是`\"map\" \"<\" keyType \",\" type \">\" mapName \"=\" fieldNumber [ \"[\" fieldOptions \"]\"`。\n\n比如:\n\n```protobuf\nmap<int64,string> values = 1;\n```\n\n`map`字段不能同时使用`repeated`。\n\n### Any\n\n`Any`字段允许你处理嵌套数据，并不需要它的proto定义。一个`Any`以bytes呈现序列化的消息，并且包含一个URL作为这个类型的唯一标识和元数据。\n\n为了使用`Any`类型，你需要引入`google/protobuf/any.proto`。\n\n```protobuf\nimport \"google/protobuf/any.proto\";\n\nmessage ErrorStatus {\n  string message = 1;\n  repeated google.protobuf.Any details = 2;\n}\n```\n\nAny类型用来替换proto2中的扩展。\n\n### 使用其他消息类型\n\n你可以将其他消息类型用作字段类型。例如，假设在每一个SearchResponse消息中包含Result消息，此时可以在相同的.proto文件中定义一个Result消息类型，然后在SearchResponse消息中指定一个Result类型的字段，如：\n\n```protobuf\nmessage SearchResponse {\n  repeated Result result = 1;\n}\n\nmessage Result {\n  required string url = 1;\n  optional string title = 2;\n  repeated string snippets = 3;\n}\n```\n\n### 导入定义\n\n在上面的例子中，Result消息类型与SearchResponse是定义在同一文件中的。如果想要使用的消息类型已经在其他.proto文件中已经定义过了呢？\n你可以通过导入（importing）其他.proto文件中的定义来使用它们。要导入其他.proto文件的定义，你需要在你的文件中添加一个导入声明，如：\n\n```protobuf\nimport \"myproject/other_protos.proto\";\n```\n\n默认情况下你只能使用直接导入的.proto文件中的定义. 然而， 有时候你需要移动一个.proto文件到一个新的位置， 可以不直接移动.proto文件， 只需放入一个dummy .proto 文件在老的位置， 然后使用import转向新的位置:\n\n```protobuf\n// new.proto\n// All definitions are moved here\n// old.proto\n// This is the proto that all clients are importing.\nimport public \"new.proto\";\nimport \"other.proto\";\n```\n\n// client.proto\n\n```protobuf\nimport \"old.proto\";\n// You use definitions from old.proto and new.proto, but not other.proto\n```\n\nprotocol编译器就会在一系列目录中查找需要被导入的文件，这些目录通过protocol编译器的命令行参数-I/–import_path指定。如果不提供参数，编译器就在其调用目录下查找。\n\n### 嵌套类型\n\n你可以在其他消息类型中定义、使用消息类型，在下面的例子中，Result消息就定义在SearchResponse消息内，如：\n\n```protobuf\nmessage SearchResponse {\n  message Result {\n    required string url = 1;\n    optional string title = 2;\n    repeated string snippets = 3;\n  }\n  repeated Result result = 1;\n}\n```\n\n如果你想在它的父消息类型的外部重用这个消息类型，你需要以Parent.Type的形式使用它，如：\n\n```protobuf\nmessage SomeOtherMessage {\n  optional SearchResponse.Result result = 1;\n}\n```\n\n当然，你也可以将消息嵌套任意多层，如：\n\n```protobuf\nmessage Outer {                  // Level 0\n  message MiddleAA {  // Level 1\n    message Inner {   // Level 2\n      required int64 ival = 1;\n      optional bool  booly = 2;\n    }\n  }\n  message MiddleBB {  // Level 1\n    message Inner {   // Level 2\n      required int32 ival = 1;\n      optional bool  booly = 2;\n    }\n  }\n}\n```\n\n### 更新一个消息类型\n\n==如果一个已有的消息格式已无法满足新的需求——如，要在消息中添加一个额外的字段——但是同时旧版本写的代码仍然可用。不用担心！更新消息而不破坏已有代码是非常简单的。在更新时只要记住以下的规则即可。==\n\n- 不要更改任何已有的字段的数值标识。\n  所添加的任何字段都必须是optional或repeated的。这就意味着任何使用“旧”的消息格式的代码序列化的消息可以被新的代码所解析，因为它们 不会丢掉任何required的元素。应该为这些元素设置合理的默认值，这样新的代码就能够正确地与老代码生成的消息交互了。类似地，新的代码创建的消息 也能被老的代码解析：老的二进制程序在解析的时候只是简单地将新字段忽略。然而，未知的字段是没有被抛弃的。此后，如果消息被序列化，未知的字段会随之一 起被序列化——所以，如果消息传到了新代码那里，则新的字段仍然可用。注意：对Python来说，对未知字段的保留策略是无效的。\n- 非required的字段可以移除——只要它们的标识号在新的消息类型中不再使用（更好的做法可能是重命名那个字段，例如在字段前添加“OBSOLETE_”前缀，那样的话，使用的.proto文件的用户将来就不会无意中重新使用了那些不该使用的标识号）。\n- 一个非required的字段可以转换为一个扩展，反之亦然——只要它的类型和标识号保持不变。\n- int32, uint32, int64, uint64,和bool是全部兼容的，这意味着可以将这些类型中的一个转换为另外一个，而不会破坏向前、 向后的兼容性。如果解析出来的数字与对应的类型不相符，那么结果就像在C++中对它进行了强制类型转换一样（例如，如果把一个64位数字当作int32来 读取，那么它就会被截断为32位的数字）。\n- sint32和sint64是互相兼容的，但是它们与其他整数类型不兼容。\n- string和bytes是兼容的——只要bytes是有效的UTF-8编码。\n- 嵌套消息与bytes是兼容的——只要bytes包含该消息的一个编码过的版本。\n- fixed32与sfixed32是兼容的，fixed64与sfixed64是兼容的。\n\n## proto文件编译\n\n将.proto文件，编译成指定语言类库\n\n### 安装Protobuf编译器\n\nprotobuf的github发布地址： https://github.com/protocolbuffers/protobuf/releases\n\nprotobuf的编译器叫protoc，在上面的网址中找到最新版本的安装包，下载安装。\n\n1. `unzip protoc-****-osx-x86_64.zip`\n2. `cp -r include/ /usr/local/include/  # 一个\"/\"都不能少`\n3. `cp -r bin/ /usr/local/bin/  # 一个\"/\"都不能少`\n\n打开cmd，命令窗口执行protoc命令，没有报错的话，就已经安装成功。\n\n### 安装protoc-gen-go插件\n\nProtobuf核心的工具集是C++语言开发的，官方的protoc编译器中并不支持Go语言，需要安装一个插件才能生成Go代码。用如下命令安装：\n\n`go get -u -v github.com/golang/protobuf/protoc-gen-go@v1.3.0 // 指定protoc-gen-go的版本`\n\n提供了一个`protoc-gen-go`二进制文件，当编译器调用时传递了`--go_out`命令行标志时`protoc`就会使用它。`--go_out`告诉编译器把Go源代码写到哪里。编译器会为每个`.proto`文件生成一个单独的源代码文件。\n\n### 编译对应语言的pb文件\n\n在当前的目录下执行`protoc -I=. -I/usr/local/include -I=$(GOPATH)/src --go_out=. simple.proto`, 可以将这个proto编译成Go的代码，因为这里我们使用了`go_out`输出格式。\n\n`-I`指定protoc的搜索import的proto的文件夹。在`MacOS`操作系统中protobuf把一些扩展的proto放在了`/usr/local/include`对应的文件夹中，一些第三方的Go库放在了gopath对应的包下，所以这里都把它们加上了。对于这个简单的例子，实际是不需要的。\n\n`cpp_out`用来生成C++代码，`java_out`产生Java代码，`python_out`产生python代码，类似地还有`csharp_out`、`objc_out`、`ruby_out`、`php_out`等参数。\n\n一些第三方的插件也会定义自己的输出插件，比如`gofast_out`使用gogo库生成代码， `rust_out`产生rust代码。\n\n生成的代码我们指定放在本地文件夹中(`--go_out=.`)。\n\n输出文件的名称是通过获取.proto文件的名称并进行两处更改来计算的：\n\n- 生成文件的扩展名是`.pb.go`。比如说`user.proto`编译后会得到`user.pb.go`。\n- proto路径（使用`--proto_path`或`-I`命令行标志指定）将替换为输出路径（使用`--go_out`标志指定）。\n\n当你运行如下编译命令时：\n\n```shell\nprotoc --proto_path=src --go_out=build/gen src/foo.proto src/bar/baz.proto\n```\n\n编译器会读取文件`src/foo.proto`和`src/bar/baz.proto`，这将会生成两个输出文件`build/gen/foo.pb.go`和`build/gen/bar/baz.pb.go`\n\n如果有必要，编译器会自动生成`build/gen/bar`目录，但是他不能创建`build`或者`build/gen`目录，这两个必须是已经存在的目录。\n\n### 包\n\n如果一个`.proto`文件中有包声明，生成的源代码将会使用它来作为Go的包名，如果`.proto`的包名中有`.` 在Go包名中会将`.`转换为`_`。举例来说`proto`包名`example.high_score`将会生成Go包名`example_high_score`。\n\n在`.proto`文件中可以使用option `go_package`指令来覆盖上面默认生成Go包名的规则。比如说包含如下指令的一个`.proto`文件\n\n```protobuf\npackage example.high_score;\noption go_package = \"hs\";\n```\n\n生成的Go源代码的包名是`hs`。\n\n如果一个`.proto`文件中不包含package声明，生成的源代码将会使用`.proto`文件的文件名(去掉扩展名)作为Go包名，`.`会被首先转换为`_`。举例来说一个名为`high.score.proto`不包含pack声明的文件将会生成文件`high.score.pb.go`，他的Go包名是`high_score`。\n\n### 消息\n\n一个简单的消息声明：\n\n```protobuf\nmessage Foo {}\n```\n\nprotocol buffer编译器将会生成一个名为`Foo`的结构体，实现了`proto.Message`接口的`Foo`类型的指针\n\n```protobuf\ntype Foo struct {\n}\n\n// 重置proto为默认值\nfunc (m *Foo) Reset()         { *m = Foo{} }\n\n// String 返回proto的字符串表示\nfunc (m *Foo) String() string { return proto.CompactTextString(m) }\n\n// ProtoMessage作为一个tag 确保其他人不会意外的实现\n// proto.Message 接口.\nfunc (*Foo) ProtoMessage()    {}\n```\n\n### 内嵌的消息\n\n一个message可以声明在其他message的内部。比如说：\n\n```protobuf\nmessage Foo {\n  message Bar {\n  }\n}\n```\n\n这种情况，编译器会生成两个结构体：`Foo`和`Foo_Bar`。\n\n### 字段\n\n编译器会为每个在message中定义的字段生成一个Go结构体的字段，字段的确切性质取决于它的类型以及它是`singular`，`repeated`，`map`还是`oneof`字段。\n\n注意生成的Go结构体的字段将始终使用驼峰命名，即使在`.proto`文件中消息字段用的是小写加下划线（应该这样）。大小写转换的原理如下：\n\n- 首字母会大些，如果message中字段的第一个字符是`_`，它将被替换为X。\n- 如果内部下划线后跟小写字母，则删除下划线，并将后面跟随的字母大写。\n\n因此，proto字段`foo_bar_baz`在Go中变成`FooBarBaz`， `_my_field_name_2`变为`XMyFieldName_2`。\n\n### 单一标量字段\n\n对于字段定义：\n\n```protobuf\nint32 foo = 1;\n```\n\n编译器将生成一个带有名为Foo的int32字段和一个访问器方法GetFoo（）的结构，该方法返回Foo中的int32值或该字段的零值（如果字段未设置（数值型零值为0，字符串为空字符串））。\n\n### 单一message字段\n\n给出如下消息类型\n\n```protobuf\nmessage Bar {}\n```\n\n对于一个有`Bar`类型字段的消息：\n\n```protobuf\n// proto3\nmessage Baz {\n  Bar foo = 1;\n}\n```\n\n编译器将会生成一个Go结构体\n\n```Go\ntype Baz struct {\n        Foo *Bar\n}\n```\n\n消息类型的字段可以设置为nil，这意味着该字段未设置，有效清除该字段。这不等同于将值设置为消息结构体的“空”实例。\n\n编译器还生成一个`func（m * Baz）GetFoo（）* Bar`辅助函数。这让不在中间检查nil值进行链式调用成为可能。\n\n### 可重复字段\n\n每个重复的字段在Go中的结构中生成一个T类型的slice，其中T是字段的元素类型。对于带有重复字段的此消息：\n\n```protobuf\nmessage Baz {\n  repeated Bar foo = 1;\n}\n```\n\n编译器会生成如下结构体：\n\n```go\ntype Baz struct {\n        Foo  []*Bar\n}\n```\n\n同样，对于字段定义`repeated bytes foo = 1;`编译器将会生成一个带有类型为`[][]byte`名为`Foo`的字段的Go结构体。对于可重复的枚举`repeated MyEnum bar = 2;`，编译器会生成带有类型为`[]MyEnum`名为`Bar`的字段的Go结构体。\n\n### 映射字段\n\n每个映射字段会在Go的结构体中生成一个`map[TKey]TValue`类型的字段，其中`TKey`是字段的键类型`TValue`是字段的值类型。对于下面这个消息定义：\n\n```protobuf\nmessage Bar {}\n\nmessage Baz {\n  map<string, Bar> foo = 1;\n}\n```\n\n编译器生成Go结构体\n\n```go\ntype Baz struct {\n        Foo map[string]*Bar\n}\n```\n\n## 枚举\n\n给出如下枚举\n\n```protobuf\nmessage SearchRequest {\n  enum Corpus {\n    UNIVERSAL = 0;\n    WEB = 1;\n    IMAGES = 2;\n    LOCAL = 3;\n    NEWS = 4;\n    PRODUCTS = 5;\n    VIDEO = 6;\n  }\n  Corpus corpus = 1;\n  ...\n}\n```\n\n编译器将会生成一个枚举类型和一系列该类型的常量。\n\n对于消息中的枚举（像上面那样），类型名字以消息名开头\n\n```go\ntype SearchRequest_Corpus int32\n```\n\n对于包级别的枚举：\n\n```protobuf\n// .proto\nenum Foo {\n  DEFAULT_BAR = 0;\n  BAR_BELLS = 1;\n  BAR_B_CUE = 2;\n}\n```\n\nGo 中的类型不会对proto中的枚举名称进行修改：\n\n```go\ntype Foo int32\n```\n\n此类型具有`String()`方法，该方法返回给定值的名称。\n\n`Enum()`方法使用给定值初始化新分配的内存并返回相应的指针：\n\n```go\nfunc (Foo) Enum() *Foo\n```\n\n编译器为枚举中的每个值生成一个常量。对于消息中的枚举，常量以消息的名称开头：\n\n```go\nconst (\n        SearchRequest_UNIVERSAL SearchRequest_Corpus = 0\n        SearchRequest_WEB       SearchRequest_Corpus = 1\n        SearchRequest_IMAGES    SearchRequest_Corpus = 2\n        SearchRequest_LOCAL     SearchRequest_Corpus = 3\n        SearchRequest_NEWS      SearchRequest_Corpus = 4\n        SearchRequest_PRODUCTS  SearchRequest_Corpus = 5\n        SearchRequest_VIDEO     SearchRequest_Corpus = 6\n)\n```\n\n对于包级别的枚举，常量以枚举名称开头:\n\n```go\nconst (\n        Foo_DEFAULT_BAR Foo = 0\n        Foo_BAR_BELLS   Foo = 1\n        Foo_BAR_B_CUE   Foo = 2\n)\n```\n\nprotobuf编译器还生成从整数值到字符串名称的映射以及从名称到值的映射：\n\n```go\nvar Foo_name = map[int32]string{\n        0: \"DEFAULT_BAR\",\n        1: \"BAR_BELLS\",\n        2: \"BAR_B_CUE\",\n}\nvar Foo_value = map[string]int32{\n        \"DEFAULT_BAR\": 0,\n        \"BAR_BELLS\":   1,\n        \"BAR_B_CUE\":   2,\n}\n```\n\n请注意，`.proto`语言允许多个枚举符号具有相同的数值。具有相同数值的符号是同义词。这些在Go中以完全相同的方式表示，多个名称对应于相同的数值。反向映射包含数字值的单个条目，数值映射到出现在`proto`文件中首先出现的名称。","source":"_posts/protobuf入门.md","raw":"---\ntitle: Protobuf入门\ncomments: true\nkeywords: 博客文章密码\nmessage: 输入密码，查看文章\ntags: Protobuf\nabbrlink: 638e39a5\ndate: 2022-08-19 13:46:17\npassword:\nabstract:\n---\n\n# 什么是Protobuf\n\n---\n\n在网络通信和通用数据交换等应用场景中经常使用的技术是 JSON 或 XML，还有一种类型Protobuf。\n\nProtobuf是Protocol Buffers的简称，它是Google出品的性能优异、跨语言、跨平台的序列化库，用于描述一种轻便高效的结构化数据存储格式，并于2008年对外开源。Protobuf可以用于结构化数据串行化，或者说序列化。它的设计非常适用于在网络通讯中的数据载体，很适合做数据存储或 RPC 数据交换格式，它序列化出来的数据量少再加上以 K-V 的方式来存储数据，对消息的版本兼容性非常强，可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。开发者可以通过 ProtoBuf 定义数据结构，然后通过 ProtoBuf 工具生成各种语言版本的数据结构类库，用于操作 ProtoBuf 协议数据\n\nProtobuf是一种语言无关、平台无关、可扩展的序列化结构数据的方法，它可用于（数据）通信协议、数据存储等。\n\nProtocol Buffers 是一种灵活，高效，自动化机制的结构数据序列化方法－可类比 XML，但是比 XML 更小（3 ~ 10倍）、更快（20 ~ 100倍）、更为简单。json、xml都是基于文本格式，protobuf是二进制格式。\n\nProtobuf中最基本的数据单元是message，是类似Go语言中结构体的存在。在message中可以嵌套message或其它的基础数据类型的成员。\n\n> 序列化(serialization、marshalling)的过程是指将数据结构或者对象的状态转换成可以存储(比如文件、内存)或者传输的格式(比如网络)。反向操作就是反序列化(deserialization、unmarshalling)的过程。\n\n![image-20220818145636178](https://raw.githubusercontent.com/gods-view/images/master/imageimage-20220818145636178.png)\n\n# 定义Message\n\n---\n\n使用 ProtoBuf ，首先需要通过 ProtoBuf 语法定义数据结构(消息)，这些定义好的数据结构保存在.proto为后缀的文件中。\n\n## 字段类型与字段编号\n\n```protobuf\n// 指定protobuf的版本，proto3是最新的语法版本，如果省略protocol buffer编译器默认使用proto2语法。他必须是文件中非空非注释行的第一行\nsyntax = \"proto3\";\n// package 定义proto的包名，包名可以避免对message 类型之间的名字冲突，同名的Message可以通过package进行区分。\n\n// 在没有为特定语言定义option xxx_package的时候，它还可以用来生成特定语言的包名，比如Java package, go package。\n\nmessage Request {\n  string userId = 1;   // 定义一个string类型的字段，字段名字为userId, 序号为1\n  int32 operation = 2;   // 定义一个int32类型的字段，字段名字为operation, 序号为2\n}\n\n// 定义数据结构，message 你可以想象成Go语言中的struct\nmessage Response {\n  string data = 1;   // 定义一个string类型的字段，字段名字为data, 序号为1\n  int32 status = 2;   // 定义一个int32类型的字段，字段名字为status, 序号为2\n}\n\n// 还可以给字段指定复合类型，包括枚举类型和其他message类型\n```\n\n字段是以`[ \"repeated\" ] type fieldName \"=\" fieldNumber [ \"[\" fieldOptions \"]\" ] \";\"`格式定义的。这个例子是一个简单的例子，采用了`type fieldName \"=\" fieldNumber`格式定义的。\n\n比如第一个字段userId, 首先是它的类型`string`，其次是字段的名称，然后是等号`=`, 之后是字段的序号，然后是分号。\n\n复杂的结构，前面可以定义为`repeated`, 序号之后可以定义一些可选项。\n\n这是普通的字段定义，当然还有一些复杂的一些字段定义，比如`Oneof`、`Map`、`Reserved`、`enum`定义，下一节我们再详细讲。\n\n> 在message定义中每个字段都有一个唯一的编号，这些编号被用来在二进制消息体中识别你定义的这些字段，一旦你的message类型被用到后就不应该在修改这些编号了。注意在将message编码成二进制消息体时字段编号1-15将会占用1个字节，16-2047将占用两个字节。所以在一些频繁使用用的message中，你应该总是先使用前面1-15字段编号。\n>\n> 你可以指定的最小编号是1，最大是2E29 - 1（536,870,911）。其中19000到19999是给protocol buffers实现保留的字段标号，定义message时不能使用。\n\n### 保留字段\n\n当你删掉或者注释掉message中的一个字段时，未来其他开发者在更新message定义时就可以重用之前的字段编号。如果他们意外载入了老版本的`.proto`文件将会导致严重的问题，比如数据损坏、隐私泄露等。一种避免问题发生的方式是指定保留的字段编号和字段名称。如果未来有人用了这些字段标识那么在编译时protocol buffer的编译器会报错。\n\n```protobuf\nmessage Foo {\n  reserved 2, 15, 9 to 11;  // 保留字段\n  reserved \"foo\", \"bar\";\n}\n```\n\n### Optional的字段和默认值\n\n如上所述，消息描述中的一个元素可以被标记为“可选的”（optional）。一个格式良好的消息可以包含0个或一个optional的元素。当解 析消息时，如果它不包含optional的元素值，那么解析出来的对象中的对应字段就被置为默认值。默认值可以在消息描述文件中指定。例如，要为 *SearchRequest*消息的*result_per_page*字段指定默认值10，在定义消息格式时如下所示：\n\n```protobuf\noptional int32 result_per_page = 3 [default = 10];\n```\n\n如果没有为optional的元素指定默认值，就会使用与特定类型相关的默认值：对string来说，默认值是空字符串。对bool来说，默认值是false。对数值类型来说，默认值是0。对枚举来说，默认值是枚举类型定义中的第一个值。\n\n### 枚举\n\n当需要定义一个消息类型的时候，可能想为一个字段指定某“预定义值序列”中的一个值。例如，假设要为每一个SearchRequest消息添加一个 corpus字段，而corpus的值可能是UNIVERSAL，WEB，IMAGES，LOCAL，NEWS，PRODUCTS或VIDEO中的一个。 其实可以很容易地实现这一点：通过向消息定义中添加一个枚举（enum）就可以了。一个enum类型的字段只能用指定的常量集中的一个值作为其值（如果尝 试指定不同的值，解析器就会把它当作一个未知的字段来对待）。在下面的例子中，在消息格式中添加了一个叫做Corpus的枚举类型——它含有所有可能的值 ——以及一个类型为Corpus的字段：\n\n```protobuf\nmessage SearchRequest {\n  required string query = 1;\n  optional int32 page_number = 2;\n  optional int32 result_per_page = 3 [default = 10];\n  enum Corpus {\n    UNIVERSAL = 0;\n    WEB = 1;\n    IMAGES = 2;\n    LOCAL = 3;\n    NEWS = 4;\n    PRODUCTS = 5;\n    VIDEO = 6;\n  }\n  optional Corpus corpus = 4 [default = UNIVERSAL];\n}\n```\n\n你可以为枚举常量定义别名。 需要设置allow_alias option 为 true, 否则 protocol编译器会产生错误信息。\n\n```protobuf\nenum EnumAllowingAlias {\n  option allow_alias = true;\n  UNKNOWN = 0; // 枚举类型的第一个选项的标识符必须是0，这也是枚举类型的默认值。\n  STARTED = 1;\n  RUNNING = 1; // 如果设置allow_alias，允许字段编号重复，RUNNING是STARTED的别名。\n}\nenum EnumNotAllowingAlias {\n  UNKNOWN2 = 0;\n  STARTED2 = 1;\n  // RUNNING = 1;  // Uncommenting this line will cause a compile error inside Google and a warning message outside.\n}\n```\n\n枚举常量必须在32位整型值的范围内。因为enum值是使用可变编码方式的，对负数不够高效，因此不推荐在enum中使用负数。如上例所示，可以在 一个消息定义的内部或外部定义枚举——这些枚举可以在.proto文件中的任何消息定义里重用。当然也可以在一个消息中声明一个枚举类型，而在另一个不同 的消息中使用它——采用MessageType.EnumType的语法格式。\n\n当对一个使用了枚举的.proto文件运行protocol buffer编译器的时候，生成的代码中将有一个对应的enum（对Java或C++来说），或者一个特殊的EnumDescriptor类（对 Python来说），它被用来在运行时生成的类中创建一系列的整型值符号常量（symbolic constants）。\n\n注意枚举类型的定义采用C++ scoping规则，也就是枚举值是枚举类型的兄弟类型，而不是子类型，所以避免在同一个package定义重名的枚举字段。\n\n### Oneof\n\n如果你有一组字段，同时最多允许这一组中的一个字段出现，就可以使用`Oneof`定义这一组字段，这有点Union的意思，但是Oneof允许你设置零各值。\n\n因为proto3没有办法区分正常的值是否是设置了还是取得缺省值(比如int64类型字段，如果它的值是0，你无法判断数据是否包含这个字段，因为0几可能是数据中设置的值，也可能是这个字段的零值)，所以你可以通过Oneof取得这个功能，因为Oneof有判断字段是否设置的功能。\n\n```protobuf\nsyntax = \"proto3\";\n\npackage abc;\n\nmessage OneofMessage {\n    oneof test_oneof {\n      string name = 4;\n      int64 value = 9;\n    }\n  }\n```\n\n`oneof`字段不能同时使用`repeated`。\n\n### map类型\n\nmap类型需要设置键和值的类型，格式是`\"map\" \"<\" keyType \",\" type \">\" mapName \"=\" fieldNumber [ \"[\" fieldOptions \"]\"`。\n\n比如:\n\n```protobuf\nmap<int64,string> values = 1;\n```\n\n`map`字段不能同时使用`repeated`。\n\n### Any\n\n`Any`字段允许你处理嵌套数据，并不需要它的proto定义。一个`Any`以bytes呈现序列化的消息，并且包含一个URL作为这个类型的唯一标识和元数据。\n\n为了使用`Any`类型，你需要引入`google/protobuf/any.proto`。\n\n```protobuf\nimport \"google/protobuf/any.proto\";\n\nmessage ErrorStatus {\n  string message = 1;\n  repeated google.protobuf.Any details = 2;\n}\n```\n\nAny类型用来替换proto2中的扩展。\n\n### 使用其他消息类型\n\n你可以将其他消息类型用作字段类型。例如，假设在每一个SearchResponse消息中包含Result消息，此时可以在相同的.proto文件中定义一个Result消息类型，然后在SearchResponse消息中指定一个Result类型的字段，如：\n\n```protobuf\nmessage SearchResponse {\n  repeated Result result = 1;\n}\n\nmessage Result {\n  required string url = 1;\n  optional string title = 2;\n  repeated string snippets = 3;\n}\n```\n\n### 导入定义\n\n在上面的例子中，Result消息类型与SearchResponse是定义在同一文件中的。如果想要使用的消息类型已经在其他.proto文件中已经定义过了呢？\n你可以通过导入（importing）其他.proto文件中的定义来使用它们。要导入其他.proto文件的定义，你需要在你的文件中添加一个导入声明，如：\n\n```protobuf\nimport \"myproject/other_protos.proto\";\n```\n\n默认情况下你只能使用直接导入的.proto文件中的定义. 然而， 有时候你需要移动一个.proto文件到一个新的位置， 可以不直接移动.proto文件， 只需放入一个dummy .proto 文件在老的位置， 然后使用import转向新的位置:\n\n```protobuf\n// new.proto\n// All definitions are moved here\n// old.proto\n// This is the proto that all clients are importing.\nimport public \"new.proto\";\nimport \"other.proto\";\n```\n\n// client.proto\n\n```protobuf\nimport \"old.proto\";\n// You use definitions from old.proto and new.proto, but not other.proto\n```\n\nprotocol编译器就会在一系列目录中查找需要被导入的文件，这些目录通过protocol编译器的命令行参数-I/–import_path指定。如果不提供参数，编译器就在其调用目录下查找。\n\n### 嵌套类型\n\n你可以在其他消息类型中定义、使用消息类型，在下面的例子中，Result消息就定义在SearchResponse消息内，如：\n\n```protobuf\nmessage SearchResponse {\n  message Result {\n    required string url = 1;\n    optional string title = 2;\n    repeated string snippets = 3;\n  }\n  repeated Result result = 1;\n}\n```\n\n如果你想在它的父消息类型的外部重用这个消息类型，你需要以Parent.Type的形式使用它，如：\n\n```protobuf\nmessage SomeOtherMessage {\n  optional SearchResponse.Result result = 1;\n}\n```\n\n当然，你也可以将消息嵌套任意多层，如：\n\n```protobuf\nmessage Outer {                  // Level 0\n  message MiddleAA {  // Level 1\n    message Inner {   // Level 2\n      required int64 ival = 1;\n      optional bool  booly = 2;\n    }\n  }\n  message MiddleBB {  // Level 1\n    message Inner {   // Level 2\n      required int32 ival = 1;\n      optional bool  booly = 2;\n    }\n  }\n}\n```\n\n### 更新一个消息类型\n\n==如果一个已有的消息格式已无法满足新的需求——如，要在消息中添加一个额外的字段——但是同时旧版本写的代码仍然可用。不用担心！更新消息而不破坏已有代码是非常简单的。在更新时只要记住以下的规则即可。==\n\n- 不要更改任何已有的字段的数值标识。\n  所添加的任何字段都必须是optional或repeated的。这就意味着任何使用“旧”的消息格式的代码序列化的消息可以被新的代码所解析，因为它们 不会丢掉任何required的元素。应该为这些元素设置合理的默认值，这样新的代码就能够正确地与老代码生成的消息交互了。类似地，新的代码创建的消息 也能被老的代码解析：老的二进制程序在解析的时候只是简单地将新字段忽略。然而，未知的字段是没有被抛弃的。此后，如果消息被序列化，未知的字段会随之一 起被序列化——所以，如果消息传到了新代码那里，则新的字段仍然可用。注意：对Python来说，对未知字段的保留策略是无效的。\n- 非required的字段可以移除——只要它们的标识号在新的消息类型中不再使用（更好的做法可能是重命名那个字段，例如在字段前添加“OBSOLETE_”前缀，那样的话，使用的.proto文件的用户将来就不会无意中重新使用了那些不该使用的标识号）。\n- 一个非required的字段可以转换为一个扩展，反之亦然——只要它的类型和标识号保持不变。\n- int32, uint32, int64, uint64,和bool是全部兼容的，这意味着可以将这些类型中的一个转换为另外一个，而不会破坏向前、 向后的兼容性。如果解析出来的数字与对应的类型不相符，那么结果就像在C++中对它进行了强制类型转换一样（例如，如果把一个64位数字当作int32来 读取，那么它就会被截断为32位的数字）。\n- sint32和sint64是互相兼容的，但是它们与其他整数类型不兼容。\n- string和bytes是兼容的——只要bytes是有效的UTF-8编码。\n- 嵌套消息与bytes是兼容的——只要bytes包含该消息的一个编码过的版本。\n- fixed32与sfixed32是兼容的，fixed64与sfixed64是兼容的。\n\n## proto文件编译\n\n将.proto文件，编译成指定语言类库\n\n### 安装Protobuf编译器\n\nprotobuf的github发布地址： https://github.com/protocolbuffers/protobuf/releases\n\nprotobuf的编译器叫protoc，在上面的网址中找到最新版本的安装包，下载安装。\n\n1. `unzip protoc-****-osx-x86_64.zip`\n2. `cp -r include/ /usr/local/include/  # 一个\"/\"都不能少`\n3. `cp -r bin/ /usr/local/bin/  # 一个\"/\"都不能少`\n\n打开cmd，命令窗口执行protoc命令，没有报错的话，就已经安装成功。\n\n### 安装protoc-gen-go插件\n\nProtobuf核心的工具集是C++语言开发的，官方的protoc编译器中并不支持Go语言，需要安装一个插件才能生成Go代码。用如下命令安装：\n\n`go get -u -v github.com/golang/protobuf/protoc-gen-go@v1.3.0 // 指定protoc-gen-go的版本`\n\n提供了一个`protoc-gen-go`二进制文件，当编译器调用时传递了`--go_out`命令行标志时`protoc`就会使用它。`--go_out`告诉编译器把Go源代码写到哪里。编译器会为每个`.proto`文件生成一个单独的源代码文件。\n\n### 编译对应语言的pb文件\n\n在当前的目录下执行`protoc -I=. -I/usr/local/include -I=$(GOPATH)/src --go_out=. simple.proto`, 可以将这个proto编译成Go的代码，因为这里我们使用了`go_out`输出格式。\n\n`-I`指定protoc的搜索import的proto的文件夹。在`MacOS`操作系统中protobuf把一些扩展的proto放在了`/usr/local/include`对应的文件夹中，一些第三方的Go库放在了gopath对应的包下，所以这里都把它们加上了。对于这个简单的例子，实际是不需要的。\n\n`cpp_out`用来生成C++代码，`java_out`产生Java代码，`python_out`产生python代码，类似地还有`csharp_out`、`objc_out`、`ruby_out`、`php_out`等参数。\n\n一些第三方的插件也会定义自己的输出插件，比如`gofast_out`使用gogo库生成代码， `rust_out`产生rust代码。\n\n生成的代码我们指定放在本地文件夹中(`--go_out=.`)。\n\n输出文件的名称是通过获取.proto文件的名称并进行两处更改来计算的：\n\n- 生成文件的扩展名是`.pb.go`。比如说`user.proto`编译后会得到`user.pb.go`。\n- proto路径（使用`--proto_path`或`-I`命令行标志指定）将替换为输出路径（使用`--go_out`标志指定）。\n\n当你运行如下编译命令时：\n\n```shell\nprotoc --proto_path=src --go_out=build/gen src/foo.proto src/bar/baz.proto\n```\n\n编译器会读取文件`src/foo.proto`和`src/bar/baz.proto`，这将会生成两个输出文件`build/gen/foo.pb.go`和`build/gen/bar/baz.pb.go`\n\n如果有必要，编译器会自动生成`build/gen/bar`目录，但是他不能创建`build`或者`build/gen`目录，这两个必须是已经存在的目录。\n\n### 包\n\n如果一个`.proto`文件中有包声明，生成的源代码将会使用它来作为Go的包名，如果`.proto`的包名中有`.` 在Go包名中会将`.`转换为`_`。举例来说`proto`包名`example.high_score`将会生成Go包名`example_high_score`。\n\n在`.proto`文件中可以使用option `go_package`指令来覆盖上面默认生成Go包名的规则。比如说包含如下指令的一个`.proto`文件\n\n```protobuf\npackage example.high_score;\noption go_package = \"hs\";\n```\n\n生成的Go源代码的包名是`hs`。\n\n如果一个`.proto`文件中不包含package声明，生成的源代码将会使用`.proto`文件的文件名(去掉扩展名)作为Go包名，`.`会被首先转换为`_`。举例来说一个名为`high.score.proto`不包含pack声明的文件将会生成文件`high.score.pb.go`，他的Go包名是`high_score`。\n\n### 消息\n\n一个简单的消息声明：\n\n```protobuf\nmessage Foo {}\n```\n\nprotocol buffer编译器将会生成一个名为`Foo`的结构体，实现了`proto.Message`接口的`Foo`类型的指针\n\n```protobuf\ntype Foo struct {\n}\n\n// 重置proto为默认值\nfunc (m *Foo) Reset()         { *m = Foo{} }\n\n// String 返回proto的字符串表示\nfunc (m *Foo) String() string { return proto.CompactTextString(m) }\n\n// ProtoMessage作为一个tag 确保其他人不会意外的实现\n// proto.Message 接口.\nfunc (*Foo) ProtoMessage()    {}\n```\n\n### 内嵌的消息\n\n一个message可以声明在其他message的内部。比如说：\n\n```protobuf\nmessage Foo {\n  message Bar {\n  }\n}\n```\n\n这种情况，编译器会生成两个结构体：`Foo`和`Foo_Bar`。\n\n### 字段\n\n编译器会为每个在message中定义的字段生成一个Go结构体的字段，字段的确切性质取决于它的类型以及它是`singular`，`repeated`，`map`还是`oneof`字段。\n\n注意生成的Go结构体的字段将始终使用驼峰命名，即使在`.proto`文件中消息字段用的是小写加下划线（应该这样）。大小写转换的原理如下：\n\n- 首字母会大些，如果message中字段的第一个字符是`_`，它将被替换为X。\n- 如果内部下划线后跟小写字母，则删除下划线，并将后面跟随的字母大写。\n\n因此，proto字段`foo_bar_baz`在Go中变成`FooBarBaz`， `_my_field_name_2`变为`XMyFieldName_2`。\n\n### 单一标量字段\n\n对于字段定义：\n\n```protobuf\nint32 foo = 1;\n```\n\n编译器将生成一个带有名为Foo的int32字段和一个访问器方法GetFoo（）的结构，该方法返回Foo中的int32值或该字段的零值（如果字段未设置（数值型零值为0，字符串为空字符串））。\n\n### 单一message字段\n\n给出如下消息类型\n\n```protobuf\nmessage Bar {}\n```\n\n对于一个有`Bar`类型字段的消息：\n\n```protobuf\n// proto3\nmessage Baz {\n  Bar foo = 1;\n}\n```\n\n编译器将会生成一个Go结构体\n\n```Go\ntype Baz struct {\n        Foo *Bar\n}\n```\n\n消息类型的字段可以设置为nil，这意味着该字段未设置，有效清除该字段。这不等同于将值设置为消息结构体的“空”实例。\n\n编译器还生成一个`func（m * Baz）GetFoo（）* Bar`辅助函数。这让不在中间检查nil值进行链式调用成为可能。\n\n### 可重复字段\n\n每个重复的字段在Go中的结构中生成一个T类型的slice，其中T是字段的元素类型。对于带有重复字段的此消息：\n\n```protobuf\nmessage Baz {\n  repeated Bar foo = 1;\n}\n```\n\n编译器会生成如下结构体：\n\n```go\ntype Baz struct {\n        Foo  []*Bar\n}\n```\n\n同样，对于字段定义`repeated bytes foo = 1;`编译器将会生成一个带有类型为`[][]byte`名为`Foo`的字段的Go结构体。对于可重复的枚举`repeated MyEnum bar = 2;`，编译器会生成带有类型为`[]MyEnum`名为`Bar`的字段的Go结构体。\n\n### 映射字段\n\n每个映射字段会在Go的结构体中生成一个`map[TKey]TValue`类型的字段，其中`TKey`是字段的键类型`TValue`是字段的值类型。对于下面这个消息定义：\n\n```protobuf\nmessage Bar {}\n\nmessage Baz {\n  map<string, Bar> foo = 1;\n}\n```\n\n编译器生成Go结构体\n\n```go\ntype Baz struct {\n        Foo map[string]*Bar\n}\n```\n\n## 枚举\n\n给出如下枚举\n\n```protobuf\nmessage SearchRequest {\n  enum Corpus {\n    UNIVERSAL = 0;\n    WEB = 1;\n    IMAGES = 2;\n    LOCAL = 3;\n    NEWS = 4;\n    PRODUCTS = 5;\n    VIDEO = 6;\n  }\n  Corpus corpus = 1;\n  ...\n}\n```\n\n编译器将会生成一个枚举类型和一系列该类型的常量。\n\n对于消息中的枚举（像上面那样），类型名字以消息名开头\n\n```go\ntype SearchRequest_Corpus int32\n```\n\n对于包级别的枚举：\n\n```protobuf\n// .proto\nenum Foo {\n  DEFAULT_BAR = 0;\n  BAR_BELLS = 1;\n  BAR_B_CUE = 2;\n}\n```\n\nGo 中的类型不会对proto中的枚举名称进行修改：\n\n```go\ntype Foo int32\n```\n\n此类型具有`String()`方法，该方法返回给定值的名称。\n\n`Enum()`方法使用给定值初始化新分配的内存并返回相应的指针：\n\n```go\nfunc (Foo) Enum() *Foo\n```\n\n编译器为枚举中的每个值生成一个常量。对于消息中的枚举，常量以消息的名称开头：\n\n```go\nconst (\n        SearchRequest_UNIVERSAL SearchRequest_Corpus = 0\n        SearchRequest_WEB       SearchRequest_Corpus = 1\n        SearchRequest_IMAGES    SearchRequest_Corpus = 2\n        SearchRequest_LOCAL     SearchRequest_Corpus = 3\n        SearchRequest_NEWS      SearchRequest_Corpus = 4\n        SearchRequest_PRODUCTS  SearchRequest_Corpus = 5\n        SearchRequest_VIDEO     SearchRequest_Corpus = 6\n)\n```\n\n对于包级别的枚举，常量以枚举名称开头:\n\n```go\nconst (\n        Foo_DEFAULT_BAR Foo = 0\n        Foo_BAR_BELLS   Foo = 1\n        Foo_BAR_B_CUE   Foo = 2\n)\n```\n\nprotobuf编译器还生成从整数值到字符串名称的映射以及从名称到值的映射：\n\n```go\nvar Foo_name = map[int32]string{\n        0: \"DEFAULT_BAR\",\n        1: \"BAR_BELLS\",\n        2: \"BAR_B_CUE\",\n}\nvar Foo_value = map[string]int32{\n        \"DEFAULT_BAR\": 0,\n        \"BAR_BELLS\":   1,\n        \"BAR_B_CUE\":   2,\n}\n```\n\n请注意，`.proto`语言允许多个枚举符号具有相同的数值。具有相同数值的符号是同义词。这些在Go中以完全相同的方式表示，多个名称对应于相同的数值。反向映射包含数字值的单个条目，数值映射到出现在`proto`文件中首先出现的名称。","slug":"protobuf入门","published":1,"updated":"2022-08-19T08:35:08.000Z","_id":"cl707w38j000231c90o1r7o5a","layout":"post","photos":[],"link":"","content":"<h1 id=\"什么是Protobuf\"><a href=\"#什么是Protobuf\" class=\"headerlink\" title=\"什么是Protobuf\"></a>什么是Protobuf</h1><hr>\n<p>在网络通信和通用数据交换等应用场景中经常使用的技术是 JSON 或 XML，还有一种类型Protobuf。</p>\n<p>Protobuf是Protocol Buffers的简称，它是Google出品的性能优异、跨语言、跨平台的序列化库，用于描述一种轻便高效的结构化数据存储格式，并于2008年对外开源。Protobuf可以用于结构化数据串行化，或者说序列化。它的设计非常适用于在网络通讯中的数据载体，很适合做数据存储或 RPC 数据交换格式，它序列化出来的数据量少再加上以 K-V 的方式来存储数据，对消息的版本兼容性非常强，可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。开发者可以通过 ProtoBuf 定义数据结构，然后通过 ProtoBuf 工具生成各种语言版本的数据结构类库，用于操作 ProtoBuf 协议数据</p>\n<p>Protobuf是一种语言无关、平台无关、可扩展的序列化结构数据的方法，它可用于（数据）通信协议、数据存储等。</p>\n<p>Protocol Buffers 是一种灵活，高效，自动化机制的结构数据序列化方法－可类比 XML，但是比 XML 更小（3 ~ 10倍）、更快（20 ~ 100倍）、更为简单。json、xml都是基于文本格式，protobuf是二进制格式。</p>\n<p>Protobuf中最基本的数据单元是message，是类似Go语言中结构体的存在。在message中可以嵌套message或其它的基础数据类型的成员。</p>\n<blockquote>\n<p>序列化(serialization、marshalling)的过程是指将数据结构或者对象的状态转换成可以存储(比如文件、内存)或者传输的格式(比如网络)。反向操作就是反序列化(deserialization、unmarshalling)的过程。</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/gods-view/images/master/imageimage-20220818145636178.png\" alt=\"image-20220818145636178\"></p>\n<h1 id=\"定义Message\"><a href=\"#定义Message\" class=\"headerlink\" title=\"定义Message\"></a>定义Message</h1><hr>\n<p>使用 ProtoBuf ，首先需要通过 ProtoBuf 语法定义数据结构(消息)，这些定义好的数据结构保存在.proto为后缀的文件中。</p>\n<h2 id=\"字段类型与字段编号\"><a href=\"#字段类型与字段编号\" class=\"headerlink\" title=\"字段类型与字段编号\"></a>字段类型与字段编号</h2><figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定protobuf的版本，proto3是最新的语法版本，如果省略protocol buffer编译器默认使用proto2语法。他必须是文件中非空非注释行的第一行</span></span><br><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// package 定义proto的包名，包名可以避免对message 类型之间的名字冲突，同名的Message可以通过package进行区分。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在没有为特定语言定义option xxx_package的时候，它还可以用来生成特定语言的包名，比如Java package, go package。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Request</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> userId = <span class=\"number\">1</span>;   <span class=\"comment\">// 定义一个string类型的字段，字段名字为userId, 序号为1</span></span><br><span class=\"line\">  <span class=\"type\">int32</span> operation = <span class=\"number\">2</span>;   <span class=\"comment\">// 定义一个int32类型的字段，字段名字为operation, 序号为2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义数据结构，message 你可以想象成Go语言中的struct</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Response</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> data = <span class=\"number\">1</span>;   <span class=\"comment\">// 定义一个string类型的字段，字段名字为data, 序号为1</span></span><br><span class=\"line\">  <span class=\"type\">int32</span> status = <span class=\"number\">2</span>;   <span class=\"comment\">// 定义一个int32类型的字段，字段名字为status, 序号为2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 还可以给字段指定复合类型，包括枚举类型和其他message类型</span></span><br></pre></td></tr></table></figure>\n\n<p>字段是以<code>[ &quot;repeated&quot; ] type fieldName &quot;=&quot; fieldNumber [ &quot;[&quot; fieldOptions &quot;]&quot; ] &quot;;&quot;</code>格式定义的。这个例子是一个简单的例子，采用了<code>type fieldName &quot;=&quot; fieldNumber</code>格式定义的。</p>\n<p>比如第一个字段userId, 首先是它的类型<code>string</code>，其次是字段的名称，然后是等号<code>=</code>, 之后是字段的序号，然后是分号。</p>\n<p>复杂的结构，前面可以定义为<code>repeated</code>, 序号之后可以定义一些可选项。</p>\n<p>这是普通的字段定义，当然还有一些复杂的一些字段定义，比如<code>Oneof</code>、<code>Map</code>、<code>Reserved</code>、<code>enum</code>定义，下一节我们再详细讲。</p>\n<blockquote>\n<p>在message定义中每个字段都有一个唯一的编号，这些编号被用来在二进制消息体中识别你定义的这些字段，一旦你的message类型被用到后就不应该在修改这些编号了。注意在将message编码成二进制消息体时字段编号1-15将会占用1个字节，16-2047将占用两个字节。所以在一些频繁使用用的message中，你应该总是先使用前面1-15字段编号。</p>\n<p>你可以指定的最小编号是1，最大是2E29 - 1（536,870,911）。其中19000到19999是给protocol buffers实现保留的字段标号，定义message时不能使用。</p>\n</blockquote>\n<h3 id=\"保留字段\"><a href=\"#保留字段\" class=\"headerlink\" title=\"保留字段\"></a>保留字段</h3><p>当你删掉或者注释掉message中的一个字段时，未来其他开发者在更新message定义时就可以重用之前的字段编号。如果他们意外载入了老版本的<code>.proto</code>文件将会导致严重的问题，比如数据损坏、隐私泄露等。一种避免问题发生的方式是指定保留的字段编号和字段名称。如果未来有人用了这些字段标识那么在编译时protocol buffer的编译器会报错。</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  reserved <span class=\"number\">2</span>, <span class=\"number\">15</span>, <span class=\"number\">9</span> to <span class=\"number\">11</span>;  <span class=\"comment\">// 保留字段</span></span><br><span class=\"line\">  reserved <span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Optional的字段和默认值\"><a href=\"#Optional的字段和默认值\" class=\"headerlink\" title=\"Optional的字段和默认值\"></a>Optional的字段和默认值</h3><p>如上所述，消息描述中的一个元素可以被标记为“可选的”（optional）。一个格式良好的消息可以包含0个或一个optional的元素。当解 析消息时，如果它不包含optional的元素值，那么解析出来的对象中的对应字段就被置为默认值。默认值可以在消息描述文件中指定。例如，要为 <em>SearchRequest</em>消息的<em>result_per_page</em>字段指定默认值10，在定义消息格式时如下所示：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"type\">int32</span> result_per_page = <span class=\"number\">3</span> [default = <span class=\"number\">10</span>];</span><br></pre></td></tr></table></figure>\n\n<p>如果没有为optional的元素指定默认值，就会使用与特定类型相关的默认值：对string来说，默认值是空字符串。对bool来说，默认值是false。对数值类型来说，默认值是0。对枚举来说，默认值是枚举类型定义中的第一个值。</p>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><p>当需要定义一个消息类型的时候，可能想为一个字段指定某“预定义值序列”中的一个值。例如，假设要为每一个SearchRequest消息添加一个 corpus字段，而corpus的值可能是UNIVERSAL，WEB，IMAGES，LOCAL，NEWS，PRODUCTS或VIDEO中的一个。 其实可以很容易地实现这一点：通过向消息定义中添加一个枚举（enum）就可以了。一个enum类型的字段只能用指定的常量集中的一个值作为其值（如果尝 试指定不同的值，解析器就会把它当作一个未知的字段来对待）。在下面的例子中，在消息格式中添加了一个叫做Corpus的枚举类型——它含有所有可能的值 ——以及一个类型为Corpus的字段：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SearchRequest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">string</span> query = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">int32</span> page_number = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">int32</span> result_per_page = <span class=\"number\">3</span> [default = <span class=\"number\">10</span>];</span><br><span class=\"line\">  <span class=\"keyword\">enum </span><span class=\"title class_\">Corpus</span> &#123;</span><br><span class=\"line\">    UNIVERSAL = <span class=\"number\">0</span>;</span><br><span class=\"line\">    WEB = <span class=\"number\">1</span>;</span><br><span class=\"line\">    IMAGES = <span class=\"number\">2</span>;</span><br><span class=\"line\">    LOCAL = <span class=\"number\">3</span>;</span><br><span class=\"line\">    NEWS = <span class=\"number\">4</span>;</span><br><span class=\"line\">    PRODUCTS = <span class=\"number\">5</span>;</span><br><span class=\"line\">    VIDEO = <span class=\"number\">6</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> Corpus corpus = <span class=\"number\">4</span> [default = UNIVERSAL];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以为枚举常量定义别名。 需要设置allow_alias option 为 true, 否则 protocol编译器会产生错误信息。</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum </span><span class=\"title class_\">EnumAllowingAlias</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">option</span> allow_alias = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  UNKNOWN = <span class=\"number\">0</span>; <span class=\"comment\">// 枚举类型的第一个选项的标识符必须是0，这也是枚举类型的默认值。</span></span><br><span class=\"line\">  STARTED = <span class=\"number\">1</span>;</span><br><span class=\"line\">  RUNNING = <span class=\"number\">1</span>; <span class=\"comment\">// 如果设置allow_alias，允许字段编号重复，RUNNING是STARTED的别名。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">enum </span><span class=\"title class_\">EnumNotAllowingAlias</span> &#123;</span><br><span class=\"line\">  UNKNOWN2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  STARTED2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// RUNNING = 1;  // Uncommenting this line will cause a compile error inside Google and a warning message outside.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>枚举常量必须在32位整型值的范围内。因为enum值是使用可变编码方式的，对负数不够高效，因此不推荐在enum中使用负数。如上例所示，可以在 一个消息定义的内部或外部定义枚举——这些枚举可以在.proto文件中的任何消息定义里重用。当然也可以在一个消息中声明一个枚举类型，而在另一个不同 的消息中使用它——采用MessageType.EnumType的语法格式。</p>\n<p>当对一个使用了枚举的.proto文件运行protocol buffer编译器的时候，生成的代码中将有一个对应的enum（对Java或C++来说），或者一个特殊的EnumDescriptor类（对 Python来说），它被用来在运行时生成的类中创建一系列的整型值符号常量（symbolic constants）。</p>\n<p>注意枚举类型的定义采用C++ scoping规则，也就是枚举值是枚举类型的兄弟类型，而不是子类型，所以避免在同一个package定义重名的枚举字段。</p>\n<h3 id=\"Oneof\"><a href=\"#Oneof\" class=\"headerlink\" title=\"Oneof\"></a>Oneof</h3><p>如果你有一组字段，同时最多允许这一组中的一个字段出现，就可以使用<code>Oneof</code>定义这一组字段，这有点Union的意思，但是Oneof允许你设置零各值。</p>\n<p>因为proto3没有办法区分正常的值是否是设置了还是取得缺省值(比如int64类型字段，如果它的值是0，你无法判断数据是否包含这个字段，因为0几可能是数据中设置的值，也可能是这个字段的零值)，所以你可以通过Oneof取得这个功能，因为Oneof有判断字段是否设置的功能。</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> abc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">OneofMessage</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">oneof</span> test_oneof &#123;</span><br><span class=\"line\">      <span class=\"type\">string</span> name = <span class=\"number\">4</span>;</span><br><span class=\"line\">      <span class=\"type\">int64</span> value = <span class=\"number\">9</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>oneof</code>字段不能同时使用<code>repeated</code>。</p>\n<h3 id=\"map类型\"><a href=\"#map类型\" class=\"headerlink\" title=\"map类型\"></a>map类型</h3><p>map类型需要设置键和值的类型，格式是<code>&quot;map&quot; &quot;&lt;&quot; keyType &quot;,&quot; type &quot;&gt;&quot; mapName &quot;=&quot; fieldNumber [ &quot;[&quot; fieldOptions &quot;]&quot;</code>。</p>\n<p>比如:</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map&lt;<span class=\"type\">int64</span>,<span class=\"type\">string</span>&gt; values = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>map</code>字段不能同时使用<code>repeated</code>。</p>\n<h3 id=\"Any\"><a href=\"#Any\" class=\"headerlink\" title=\"Any\"></a>Any</h3><p><code>Any</code>字段允许你处理嵌套数据，并不需要它的proto定义。一个<code>Any</code>以bytes呈现序列化的消息，并且包含一个URL作为这个类型的唯一标识和元数据。</p>\n<p>为了使用<code>Any</code>类型，你需要引入<code>google/protobuf/any.proto</code>。</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;google/protobuf/any.proto&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">ErrorStatus</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> message = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> google.protobuf.Any details = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Any类型用来替换proto2中的扩展。</p>\n<h3 id=\"使用其他消息类型\"><a href=\"#使用其他消息类型\" class=\"headerlink\" title=\"使用其他消息类型\"></a>使用其他消息类型</h3><p>你可以将其他消息类型用作字段类型。例如，假设在每一个SearchResponse消息中包含Result消息，此时可以在相同的.proto文件中定义一个Result消息类型，然后在SearchResponse消息中指定一个Result类型的字段，如：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SearchResponse</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> Result result = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Result</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">string</span> url = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">string</span> title = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> <span class=\"type\">string</span> snippets = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入定义\"><a href=\"#导入定义\" class=\"headerlink\" title=\"导入定义\"></a>导入定义</h3><p>在上面的例子中，Result消息类型与SearchResponse是定义在同一文件中的。如果想要使用的消息类型已经在其他.proto文件中已经定义过了呢？<br>你可以通过导入（importing）其他.proto文件中的定义来使用它们。要导入其他.proto文件的定义，你需要在你的文件中添加一个导入声明，如：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;myproject/other_protos.proto&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下你只能使用直接导入的.proto文件中的定义. 然而， 有时候你需要移动一个.proto文件到一个新的位置， 可以不直接移动.proto文件， 只需放入一个dummy .proto 文件在老的位置， 然后使用import转向新的位置:</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// new.proto</span></span><br><span class=\"line\"><span class=\"comment\">// All definitions are moved here</span></span><br><span class=\"line\"><span class=\"comment\">// old.proto</span></span><br><span class=\"line\"><span class=\"comment\">// This is the proto that all clients are importing.</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> public <span class=\"string\">&quot;new.proto&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;other.proto&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>// client.proto</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;old.proto&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// You use definitions from old.proto and new.proto, but not other.proto</span></span><br></pre></td></tr></table></figure>\n\n<p>protocol编译器就会在一系列目录中查找需要被导入的文件，这些目录通过protocol编译器的命令行参数-I/–import_path指定。如果不提供参数，编译器就在其调用目录下查找。</p>\n<h3 id=\"嵌套类型\"><a href=\"#嵌套类型\" class=\"headerlink\" title=\"嵌套类型\"></a>嵌套类型</h3><p>你可以在其他消息类型中定义、使用消息类型，在下面的例子中，Result消息就定义在SearchResponse消息内，如：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SearchResponse</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">Result</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"type\">string</span> url = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">optional</span> <span class=\"type\">string</span> title = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">repeated</span> <span class=\"type\">string</span> snippets = <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> Result result = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你想在它的父消息类型的外部重用这个消息类型，你需要以Parent.Type的形式使用它，如：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SomeOtherMessage</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> SearchResponse.Result result = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然，你也可以将消息嵌套任意多层，如：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Outer</span> &#123;                  <span class=\"comment\">// Level 0</span></span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">MiddleAA</span> &#123;  <span class=\"comment\">// Level 1</span></span><br><span class=\"line\">    <span class=\"keyword\">message </span><span class=\"title class_\">Inner</span> &#123;   <span class=\"comment\">// Level 2</span></span><br><span class=\"line\">      <span class=\"keyword\">required</span> <span class=\"type\">int64</span> ival = <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">optional</span> <span class=\"type\">bool</span>  booly = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">MiddleBB</span> &#123;  <span class=\"comment\">// Level 1</span></span><br><span class=\"line\">    <span class=\"keyword\">message </span><span class=\"title class_\">Inner</span> &#123;   <span class=\"comment\">// Level 2</span></span><br><span class=\"line\">      <span class=\"keyword\">required</span> <span class=\"type\">int32</span> ival = <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">optional</span> <span class=\"type\">bool</span>  booly = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更新一个消息类型\"><a href=\"#更新一个消息类型\" class=\"headerlink\" title=\"更新一个消息类型\"></a>更新一个消息类型</h3><p>==如果一个已有的消息格式已无法满足新的需求——如，要在消息中添加一个额外的字段——但是同时旧版本写的代码仍然可用。不用担心！更新消息而不破坏已有代码是非常简单的。在更新时只要记住以下的规则即可。==</p>\n<ul>\n<li>不要更改任何已有的字段的数值标识。<br>所添加的任何字段都必须是optional或repeated的。这就意味着任何使用“旧”的消息格式的代码序列化的消息可以被新的代码所解析，因为它们 不会丢掉任何required的元素。应该为这些元素设置合理的默认值，这样新的代码就能够正确地与老代码生成的消息交互了。类似地，新的代码创建的消息 也能被老的代码解析：老的二进制程序在解析的时候只是简单地将新字段忽略。然而，未知的字段是没有被抛弃的。此后，如果消息被序列化，未知的字段会随之一 起被序列化——所以，如果消息传到了新代码那里，则新的字段仍然可用。注意：对Python来说，对未知字段的保留策略是无效的。</li>\n<li>非required的字段可以移除——只要它们的标识号在新的消息类型中不再使用（更好的做法可能是重命名那个字段，例如在字段前添加“OBSOLETE_”前缀，那样的话，使用的.proto文件的用户将来就不会无意中重新使用了那些不该使用的标识号）。</li>\n<li>一个非required的字段可以转换为一个扩展，反之亦然——只要它的类型和标识号保持不变。</li>\n<li>int32, uint32, int64, uint64,和bool是全部兼容的，这意味着可以将这些类型中的一个转换为另外一个，而不会破坏向前、 向后的兼容性。如果解析出来的数字与对应的类型不相符，那么结果就像在C++中对它进行了强制类型转换一样（例如，如果把一个64位数字当作int32来 读取，那么它就会被截断为32位的数字）。</li>\n<li>sint32和sint64是互相兼容的，但是它们与其他整数类型不兼容。</li>\n<li>string和bytes是兼容的——只要bytes是有效的UTF-8编码。</li>\n<li>嵌套消息与bytes是兼容的——只要bytes包含该消息的一个编码过的版本。</li>\n<li>fixed32与sfixed32是兼容的，fixed64与sfixed64是兼容的。</li>\n</ul>\n<h2 id=\"proto文件编译\"><a href=\"#proto文件编译\" class=\"headerlink\" title=\"proto文件编译\"></a>proto文件编译</h2><p>将.proto文件，编译成指定语言类库</p>\n<h3 id=\"安装Protobuf编译器\"><a href=\"#安装Protobuf编译器\" class=\"headerlink\" title=\"安装Protobuf编译器\"></a>安装Protobuf编译器</h3><p>protobuf的github发布地址： <a href=\"https://github.com/protocolbuffers/protobuf/releases\">https://github.com/protocolbuffers/protobuf/releases</a></p>\n<p>protobuf的编译器叫protoc，在上面的网址中找到最新版本的安装包，下载安装。</p>\n<ol>\n<li><code>unzip protoc-****-osx-x86_64.zip</code></li>\n<li><code>cp -r include/ /usr/local/include/  # 一个&quot;/&quot;都不能少</code></li>\n<li><code>cp -r bin/ /usr/local/bin/  # 一个&quot;/&quot;都不能少</code></li>\n</ol>\n<p>打开cmd，命令窗口执行protoc命令，没有报错的话，就已经安装成功。</p>\n<h3 id=\"安装protoc-gen-go插件\"><a href=\"#安装protoc-gen-go插件\" class=\"headerlink\" title=\"安装protoc-gen-go插件\"></a>安装protoc-gen-go插件</h3><p>Protobuf核心的工具集是C++语言开发的，官方的protoc编译器中并不支持Go语言，需要安装一个插件才能生成Go代码。用如下命令安装：</p>\n<p><code>go get -u -v github.com/golang/protobuf/protoc-gen-go@v1.3.0 // 指定protoc-gen-go的版本</code></p>\n<p>提供了一个<code>protoc-gen-go</code>二进制文件，当编译器调用时传递了<code>--go_out</code>命令行标志时<code>protoc</code>就会使用它。<code>--go_out</code>告诉编译器把Go源代码写到哪里。编译器会为每个<code>.proto</code>文件生成一个单独的源代码文件。</p>\n<h3 id=\"编译对应语言的pb文件\"><a href=\"#编译对应语言的pb文件\" class=\"headerlink\" title=\"编译对应语言的pb文件\"></a>编译对应语言的pb文件</h3><p>在当前的目录下执行<code>protoc -I=. -I/usr/local/include -I=$(GOPATH)/src --go_out=. simple.proto</code>, 可以将这个proto编译成Go的代码，因为这里我们使用了<code>go_out</code>输出格式。</p>\n<p><code>-I</code>指定protoc的搜索import的proto的文件夹。在<code>MacOS</code>操作系统中protobuf把一些扩展的proto放在了<code>/usr/local/include</code>对应的文件夹中，一些第三方的Go库放在了gopath对应的包下，所以这里都把它们加上了。对于这个简单的例子，实际是不需要的。</p>\n<p><code>cpp_out</code>用来生成C++代码，<code>java_out</code>产生Java代码，<code>python_out</code>产生python代码，类似地还有<code>csharp_out</code>、<code>objc_out</code>、<code>ruby_out</code>、<code>php_out</code>等参数。</p>\n<p>一些第三方的插件也会定义自己的输出插件，比如<code>gofast_out</code>使用gogo库生成代码， <code>rust_out</code>产生rust代码。</p>\n<p>生成的代码我们指定放在本地文件夹中(<code>--go_out=.</code>)。</p>\n<p>输出文件的名称是通过获取.proto文件的名称并进行两处更改来计算的：</p>\n<ul>\n<li>生成文件的扩展名是<code>.pb.go</code>。比如说<code>user.proto</code>编译后会得到<code>user.pb.go</code>。</li>\n<li>proto路径（使用<code>--proto_path</code>或<code>-I</code>命令行标志指定）将替换为输出路径（使用<code>--go_out</code>标志指定）。</li>\n</ul>\n<p>当你运行如下编译命令时：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc --proto_path=src --go_out=build/gen src/foo.proto src/bar/baz.proto</span><br></pre></td></tr></table></figure>\n\n<p>编译器会读取文件<code>src/foo.proto</code>和<code>src/bar/baz.proto</code>，这将会生成两个输出文件<code>build/gen/foo.pb.go</code>和<code>build/gen/bar/baz.pb.go</code></p>\n<p>如果有必要，编译器会自动生成<code>build/gen/bar</code>目录，但是他不能创建<code>build</code>或者<code>build/gen</code>目录，这两个必须是已经存在的目录。</p>\n<h3 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h3><p>如果一个<code>.proto</code>文件中有包声明，生成的源代码将会使用它来作为Go的包名，如果<code>.proto</code>的包名中有<code>.</code> 在Go包名中会将<code>.</code>转换为<code>_</code>。举例来说<code>proto</code>包名<code>example.high_score</code>将会生成Go包名<code>example_high_score</code>。</p>\n<p>在<code>.proto</code>文件中可以使用option <code>go_package</code>指令来覆盖上面默认生成Go包名的规则。比如说包含如下指令的一个<code>.proto</code>文件</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.high_score;</span><br><span class=\"line\"><span class=\"keyword\">option</span> go_package = <span class=\"string\">&quot;hs&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>生成的Go源代码的包名是<code>hs</code>。</p>\n<p>如果一个<code>.proto</code>文件中不包含package声明，生成的源代码将会使用<code>.proto</code>文件的文件名(去掉扩展名)作为Go包名，<code>.</code>会被首先转换为<code>_</code>。举例来说一个名为<code>high.score.proto</code>不包含pack声明的文件将会生成文件<code>high.score.pb.go</code>，他的Go包名是<code>high_score</code>。</p>\n<h3 id=\"消息\"><a href=\"#消息\" class=\"headerlink\" title=\"消息\"></a>消息</h3><p>一个简单的消息声明：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Foo</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>protocol buffer编译器将会生成一个名为<code>Foo</code>的结构体，实现了<code>proto.Message</code>接口的<code>Foo</code>类型的指针</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Foo struct &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重置proto为默认值</span></span><br><span class=\"line\">func (m *Foo) Reset()         &#123; *m = Foo&#123;&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// String 返回proto的字符串表示</span></span><br><span class=\"line\">func (m *Foo) String() <span class=\"type\">string</span> &#123; return proto.CompactTextString(m) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ProtoMessage作为一个tag 确保其他人不会意外的实现</span></span><br><span class=\"line\"><span class=\"comment\">// proto.Message 接口.</span></span><br><span class=\"line\">func (*Foo) ProtoMessage()    &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内嵌的消息\"><a href=\"#内嵌的消息\" class=\"headerlink\" title=\"内嵌的消息\"></a>内嵌的消息</h3><p>一个message可以声明在其他message的内部。比如说：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">Bar</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种情况，编译器会生成两个结构体：<code>Foo</code>和<code>Foo_Bar</code>。</p>\n<h3 id=\"字段\"><a href=\"#字段\" class=\"headerlink\" title=\"字段\"></a>字段</h3><p>编译器会为每个在message中定义的字段生成一个Go结构体的字段，字段的确切性质取决于它的类型以及它是<code>singular</code>，<code>repeated</code>，<code>map</code>还是<code>oneof</code>字段。</p>\n<p>注意生成的Go结构体的字段将始终使用驼峰命名，即使在<code>.proto</code>文件中消息字段用的是小写加下划线（应该这样）。大小写转换的原理如下：</p>\n<ul>\n<li>首字母会大些，如果message中字段的第一个字符是<code>_</code>，它将被替换为X。</li>\n<li>如果内部下划线后跟小写字母，则删除下划线，并将后面跟随的字母大写。</li>\n</ul>\n<p>因此，proto字段<code>foo_bar_baz</code>在Go中变成<code>FooBarBaz</code>， <code>_my_field_name_2</code>变为<code>XMyFieldName_2</code>。</p>\n<h3 id=\"单一标量字段\"><a href=\"#单一标量字段\" class=\"headerlink\" title=\"单一标量字段\"></a>单一标量字段</h3><p>对于字段定义：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int32</span> foo = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>编译器将生成一个带有名为Foo的int32字段和一个访问器方法GetFoo（）的结构，该方法返回Foo中的int32值或该字段的零值（如果字段未设置（数值型零值为0，字符串为空字符串））。</p>\n<h3 id=\"单一message字段\"><a href=\"#单一message字段\" class=\"headerlink\" title=\"单一message字段\"></a>单一message字段</h3><p>给出如下消息类型</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Bar</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于一个有<code>Bar</code>类型字段的消息：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// proto3</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Baz</span> &#123;</span><br><span class=\"line\">  Bar foo = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译器将会生成一个Go结构体</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Baz <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        Foo *Bar</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>消息类型的字段可以设置为nil，这意味着该字段未设置，有效清除该字段。这不等同于将值设置为消息结构体的“空”实例。</p>\n<p>编译器还生成一个<code>func（m * Baz）GetFoo（）* Bar</code>辅助函数。这让不在中间检查nil值进行链式调用成为可能。</p>\n<h3 id=\"可重复字段\"><a href=\"#可重复字段\" class=\"headerlink\" title=\"可重复字段\"></a>可重复字段</h3><p>每个重复的字段在Go中的结构中生成一个T类型的slice，其中T是字段的元素类型。对于带有重复字段的此消息：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Baz</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> Bar foo = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译器会生成如下结构体：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Baz <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        Foo  []*Bar</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样，对于字段定义<code>repeated bytes foo = 1;</code>编译器将会生成一个带有类型为<code>[][]byte</code>名为<code>Foo</code>的字段的Go结构体。对于可重复的枚举<code>repeated MyEnum bar = 2;</code>，编译器会生成带有类型为<code>[]MyEnum</code>名为<code>Bar</code>的字段的Go结构体。</p>\n<h3 id=\"映射字段\"><a href=\"#映射字段\" class=\"headerlink\" title=\"映射字段\"></a>映射字段</h3><p>每个映射字段会在Go的结构体中生成一个<code>map[TKey]TValue</code>类型的字段，其中<code>TKey</code>是字段的键类型<code>TValue</code>是字段的值类型。对于下面这个消息定义：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Bar</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Baz</span> &#123;</span><br><span class=\"line\">  map&lt;<span class=\"type\">string</span>, Bar&gt; foo = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译器生成Go结构体</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Baz <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        Foo <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]*Bar</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"枚举-1\"><a href=\"#枚举-1\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>给出如下枚举</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SearchRequest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">enum </span><span class=\"title class_\">Corpus</span> &#123;</span><br><span class=\"line\">    UNIVERSAL = <span class=\"number\">0</span>;</span><br><span class=\"line\">    WEB = <span class=\"number\">1</span>;</span><br><span class=\"line\">    IMAGES = <span class=\"number\">2</span>;</span><br><span class=\"line\">    LOCAL = <span class=\"number\">3</span>;</span><br><span class=\"line\">    NEWS = <span class=\"number\">4</span>;</span><br><span class=\"line\">    PRODUCTS = <span class=\"number\">5</span>;</span><br><span class=\"line\">    VIDEO = <span class=\"number\">6</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Corpus corpus = <span class=\"number\">1</span>;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译器将会生成一个枚举类型和一系列该类型的常量。</p>\n<p>对于消息中的枚举（像上面那样），类型名字以消息名开头</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> SearchRequest_Corpus <span class=\"type\">int32</span></span><br></pre></td></tr></table></figure>\n\n<p>对于包级别的枚举：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .proto</span></span><br><span class=\"line\"><span class=\"keyword\">enum </span><span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  DEFAULT_BAR = <span class=\"number\">0</span>;</span><br><span class=\"line\">  BAR_BELLS = <span class=\"number\">1</span>;</span><br><span class=\"line\">  BAR_B_CUE = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Go 中的类型不会对proto中的枚举名称进行修改：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Foo <span class=\"type\">int32</span></span><br></pre></td></tr></table></figure>\n\n<p>此类型具有<code>String()</code>方法，该方法返回给定值的名称。</p>\n<p><code>Enum()</code>方法使用给定值初始化新分配的内存并返回相应的指针：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(Foo)</span></span> Enum() *Foo</span><br></pre></td></tr></table></figure>\n\n<p>编译器为枚举中的每个值生成一个常量。对于消息中的枚举，常量以消息的名称开头：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">        SearchRequest_UNIVERSAL SearchRequest_Corpus = <span class=\"number\">0</span></span><br><span class=\"line\">        SearchRequest_WEB       SearchRequest_Corpus = <span class=\"number\">1</span></span><br><span class=\"line\">        SearchRequest_IMAGES    SearchRequest_Corpus = <span class=\"number\">2</span></span><br><span class=\"line\">        SearchRequest_LOCAL     SearchRequest_Corpus = <span class=\"number\">3</span></span><br><span class=\"line\">        SearchRequest_NEWS      SearchRequest_Corpus = <span class=\"number\">4</span></span><br><span class=\"line\">        SearchRequest_PRODUCTS  SearchRequest_Corpus = <span class=\"number\">5</span></span><br><span class=\"line\">        SearchRequest_VIDEO     SearchRequest_Corpus = <span class=\"number\">6</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>对于包级别的枚举，常量以枚举名称开头:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">        Foo_DEFAULT_BAR Foo = <span class=\"number\">0</span></span><br><span class=\"line\">        Foo_BAR_BELLS   Foo = <span class=\"number\">1</span></span><br><span class=\"line\">        Foo_BAR_B_CUE   Foo = <span class=\"number\">2</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>protobuf编译器还生成从整数值到字符串名称的映射以及从名称到值的映射：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Foo_name = <span class=\"keyword\">map</span>[<span class=\"type\">int32</span>]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">        <span class=\"number\">0</span>: <span class=\"string\">&quot;DEFAULT_BAR&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>: <span class=\"string\">&quot;BAR_BELLS&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">2</span>: <span class=\"string\">&quot;BAR_B_CUE&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Foo_value = <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int32</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;DEFAULT_BAR&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;BAR_BELLS&quot;</span>:   <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;BAR_B_CUE&quot;</span>:   <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请注意，<code>.proto</code>语言允许多个枚举符号具有相同的数值。具有相同数值的符号是同义词。这些在Go中以完全相同的方式表示，多个名称对应于相同的数值。反向映射包含数字值的单个条目，数值映射到出现在<code>proto</code>文件中首先出现的名称。</p>\n","site":{"data":{}},"length":12115,"excerpt":"","more":"<h1 id=\"什么是Protobuf\"><a href=\"#什么是Protobuf\" class=\"headerlink\" title=\"什么是Protobuf\"></a>什么是Protobuf</h1><hr>\n<p>在网络通信和通用数据交换等应用场景中经常使用的技术是 JSON 或 XML，还有一种类型Protobuf。</p>\n<p>Protobuf是Protocol Buffers的简称，它是Google出品的性能优异、跨语言、跨平台的序列化库，用于描述一种轻便高效的结构化数据存储格式，并于2008年对外开源。Protobuf可以用于结构化数据串行化，或者说序列化。它的设计非常适用于在网络通讯中的数据载体，很适合做数据存储或 RPC 数据交换格式，它序列化出来的数据量少再加上以 K-V 的方式来存储数据，对消息的版本兼容性非常强，可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。开发者可以通过 ProtoBuf 定义数据结构，然后通过 ProtoBuf 工具生成各种语言版本的数据结构类库，用于操作 ProtoBuf 协议数据</p>\n<p>Protobuf是一种语言无关、平台无关、可扩展的序列化结构数据的方法，它可用于（数据）通信协议、数据存储等。</p>\n<p>Protocol Buffers 是一种灵活，高效，自动化机制的结构数据序列化方法－可类比 XML，但是比 XML 更小（3 ~ 10倍）、更快（20 ~ 100倍）、更为简单。json、xml都是基于文本格式，protobuf是二进制格式。</p>\n<p>Protobuf中最基本的数据单元是message，是类似Go语言中结构体的存在。在message中可以嵌套message或其它的基础数据类型的成员。</p>\n<blockquote>\n<p>序列化(serialization、marshalling)的过程是指将数据结构或者对象的状态转换成可以存储(比如文件、内存)或者传输的格式(比如网络)。反向操作就是反序列化(deserialization、unmarshalling)的过程。</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/gods-view/images/master/imageimage-20220818145636178.png\" alt=\"image-20220818145636178\"></p>\n<h1 id=\"定义Message\"><a href=\"#定义Message\" class=\"headerlink\" title=\"定义Message\"></a>定义Message</h1><hr>\n<p>使用 ProtoBuf ，首先需要通过 ProtoBuf 语法定义数据结构(消息)，这些定义好的数据结构保存在.proto为后缀的文件中。</p>\n<h2 id=\"字段类型与字段编号\"><a href=\"#字段类型与字段编号\" class=\"headerlink\" title=\"字段类型与字段编号\"></a>字段类型与字段编号</h2><figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定protobuf的版本，proto3是最新的语法版本，如果省略protocol buffer编译器默认使用proto2语法。他必须是文件中非空非注释行的第一行</span></span><br><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// package 定义proto的包名，包名可以避免对message 类型之间的名字冲突，同名的Message可以通过package进行区分。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在没有为特定语言定义option xxx_package的时候，它还可以用来生成特定语言的包名，比如Java package, go package。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Request</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> userId = <span class=\"number\">1</span>;   <span class=\"comment\">// 定义一个string类型的字段，字段名字为userId, 序号为1</span></span><br><span class=\"line\">  <span class=\"type\">int32</span> operation = <span class=\"number\">2</span>;   <span class=\"comment\">// 定义一个int32类型的字段，字段名字为operation, 序号为2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义数据结构，message 你可以想象成Go语言中的struct</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Response</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> data = <span class=\"number\">1</span>;   <span class=\"comment\">// 定义一个string类型的字段，字段名字为data, 序号为1</span></span><br><span class=\"line\">  <span class=\"type\">int32</span> status = <span class=\"number\">2</span>;   <span class=\"comment\">// 定义一个int32类型的字段，字段名字为status, 序号为2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 还可以给字段指定复合类型，包括枚举类型和其他message类型</span></span><br></pre></td></tr></table></figure>\n\n<p>字段是以<code>[ &quot;repeated&quot; ] type fieldName &quot;=&quot; fieldNumber [ &quot;[&quot; fieldOptions &quot;]&quot; ] &quot;;&quot;</code>格式定义的。这个例子是一个简单的例子，采用了<code>type fieldName &quot;=&quot; fieldNumber</code>格式定义的。</p>\n<p>比如第一个字段userId, 首先是它的类型<code>string</code>，其次是字段的名称，然后是等号<code>=</code>, 之后是字段的序号，然后是分号。</p>\n<p>复杂的结构，前面可以定义为<code>repeated</code>, 序号之后可以定义一些可选项。</p>\n<p>这是普通的字段定义，当然还有一些复杂的一些字段定义，比如<code>Oneof</code>、<code>Map</code>、<code>Reserved</code>、<code>enum</code>定义，下一节我们再详细讲。</p>\n<blockquote>\n<p>在message定义中每个字段都有一个唯一的编号，这些编号被用来在二进制消息体中识别你定义的这些字段，一旦你的message类型被用到后就不应该在修改这些编号了。注意在将message编码成二进制消息体时字段编号1-15将会占用1个字节，16-2047将占用两个字节。所以在一些频繁使用用的message中，你应该总是先使用前面1-15字段编号。</p>\n<p>你可以指定的最小编号是1，最大是2E29 - 1（536,870,911）。其中19000到19999是给protocol buffers实现保留的字段标号，定义message时不能使用。</p>\n</blockquote>\n<h3 id=\"保留字段\"><a href=\"#保留字段\" class=\"headerlink\" title=\"保留字段\"></a>保留字段</h3><p>当你删掉或者注释掉message中的一个字段时，未来其他开发者在更新message定义时就可以重用之前的字段编号。如果他们意外载入了老版本的<code>.proto</code>文件将会导致严重的问题，比如数据损坏、隐私泄露等。一种避免问题发生的方式是指定保留的字段编号和字段名称。如果未来有人用了这些字段标识那么在编译时protocol buffer的编译器会报错。</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  reserved <span class=\"number\">2</span>, <span class=\"number\">15</span>, <span class=\"number\">9</span> to <span class=\"number\">11</span>;  <span class=\"comment\">// 保留字段</span></span><br><span class=\"line\">  reserved <span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Optional的字段和默认值\"><a href=\"#Optional的字段和默认值\" class=\"headerlink\" title=\"Optional的字段和默认值\"></a>Optional的字段和默认值</h3><p>如上所述，消息描述中的一个元素可以被标记为“可选的”（optional）。一个格式良好的消息可以包含0个或一个optional的元素。当解 析消息时，如果它不包含optional的元素值，那么解析出来的对象中的对应字段就被置为默认值。默认值可以在消息描述文件中指定。例如，要为 <em>SearchRequest</em>消息的<em>result_per_page</em>字段指定默认值10，在定义消息格式时如下所示：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"type\">int32</span> result_per_page = <span class=\"number\">3</span> [default = <span class=\"number\">10</span>];</span><br></pre></td></tr></table></figure>\n\n<p>如果没有为optional的元素指定默认值，就会使用与特定类型相关的默认值：对string来说，默认值是空字符串。对bool来说，默认值是false。对数值类型来说，默认值是0。对枚举来说，默认值是枚举类型定义中的第一个值。</p>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><p>当需要定义一个消息类型的时候，可能想为一个字段指定某“预定义值序列”中的一个值。例如，假设要为每一个SearchRequest消息添加一个 corpus字段，而corpus的值可能是UNIVERSAL，WEB，IMAGES，LOCAL，NEWS，PRODUCTS或VIDEO中的一个。 其实可以很容易地实现这一点：通过向消息定义中添加一个枚举（enum）就可以了。一个enum类型的字段只能用指定的常量集中的一个值作为其值（如果尝 试指定不同的值，解析器就会把它当作一个未知的字段来对待）。在下面的例子中，在消息格式中添加了一个叫做Corpus的枚举类型——它含有所有可能的值 ——以及一个类型为Corpus的字段：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SearchRequest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">string</span> query = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">int32</span> page_number = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">int32</span> result_per_page = <span class=\"number\">3</span> [default = <span class=\"number\">10</span>];</span><br><span class=\"line\">  <span class=\"keyword\">enum </span><span class=\"title class_\">Corpus</span> &#123;</span><br><span class=\"line\">    UNIVERSAL = <span class=\"number\">0</span>;</span><br><span class=\"line\">    WEB = <span class=\"number\">1</span>;</span><br><span class=\"line\">    IMAGES = <span class=\"number\">2</span>;</span><br><span class=\"line\">    LOCAL = <span class=\"number\">3</span>;</span><br><span class=\"line\">    NEWS = <span class=\"number\">4</span>;</span><br><span class=\"line\">    PRODUCTS = <span class=\"number\">5</span>;</span><br><span class=\"line\">    VIDEO = <span class=\"number\">6</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> Corpus corpus = <span class=\"number\">4</span> [default = UNIVERSAL];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以为枚举常量定义别名。 需要设置allow_alias option 为 true, 否则 protocol编译器会产生错误信息。</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum </span><span class=\"title class_\">EnumAllowingAlias</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">option</span> allow_alias = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  UNKNOWN = <span class=\"number\">0</span>; <span class=\"comment\">// 枚举类型的第一个选项的标识符必须是0，这也是枚举类型的默认值。</span></span><br><span class=\"line\">  STARTED = <span class=\"number\">1</span>;</span><br><span class=\"line\">  RUNNING = <span class=\"number\">1</span>; <span class=\"comment\">// 如果设置allow_alias，允许字段编号重复，RUNNING是STARTED的别名。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">enum </span><span class=\"title class_\">EnumNotAllowingAlias</span> &#123;</span><br><span class=\"line\">  UNKNOWN2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  STARTED2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// RUNNING = 1;  // Uncommenting this line will cause a compile error inside Google and a warning message outside.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>枚举常量必须在32位整型值的范围内。因为enum值是使用可变编码方式的，对负数不够高效，因此不推荐在enum中使用负数。如上例所示，可以在 一个消息定义的内部或外部定义枚举——这些枚举可以在.proto文件中的任何消息定义里重用。当然也可以在一个消息中声明一个枚举类型，而在另一个不同 的消息中使用它——采用MessageType.EnumType的语法格式。</p>\n<p>当对一个使用了枚举的.proto文件运行protocol buffer编译器的时候，生成的代码中将有一个对应的enum（对Java或C++来说），或者一个特殊的EnumDescriptor类（对 Python来说），它被用来在运行时生成的类中创建一系列的整型值符号常量（symbolic constants）。</p>\n<p>注意枚举类型的定义采用C++ scoping规则，也就是枚举值是枚举类型的兄弟类型，而不是子类型，所以避免在同一个package定义重名的枚举字段。</p>\n<h3 id=\"Oneof\"><a href=\"#Oneof\" class=\"headerlink\" title=\"Oneof\"></a>Oneof</h3><p>如果你有一组字段，同时最多允许这一组中的一个字段出现，就可以使用<code>Oneof</code>定义这一组字段，这有点Union的意思，但是Oneof允许你设置零各值。</p>\n<p>因为proto3没有办法区分正常的值是否是设置了还是取得缺省值(比如int64类型字段，如果它的值是0，你无法判断数据是否包含这个字段，因为0几可能是数据中设置的值，也可能是这个字段的零值)，所以你可以通过Oneof取得这个功能，因为Oneof有判断字段是否设置的功能。</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> abc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">OneofMessage</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">oneof</span> test_oneof &#123;</span><br><span class=\"line\">      <span class=\"type\">string</span> name = <span class=\"number\">4</span>;</span><br><span class=\"line\">      <span class=\"type\">int64</span> value = <span class=\"number\">9</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>oneof</code>字段不能同时使用<code>repeated</code>。</p>\n<h3 id=\"map类型\"><a href=\"#map类型\" class=\"headerlink\" title=\"map类型\"></a>map类型</h3><p>map类型需要设置键和值的类型，格式是<code>&quot;map&quot; &quot;&lt;&quot; keyType &quot;,&quot; type &quot;&gt;&quot; mapName &quot;=&quot; fieldNumber [ &quot;[&quot; fieldOptions &quot;]&quot;</code>。</p>\n<p>比如:</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map&lt;<span class=\"type\">int64</span>,<span class=\"type\">string</span>&gt; values = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>map</code>字段不能同时使用<code>repeated</code>。</p>\n<h3 id=\"Any\"><a href=\"#Any\" class=\"headerlink\" title=\"Any\"></a>Any</h3><p><code>Any</code>字段允许你处理嵌套数据，并不需要它的proto定义。一个<code>Any</code>以bytes呈现序列化的消息，并且包含一个URL作为这个类型的唯一标识和元数据。</p>\n<p>为了使用<code>Any</code>类型，你需要引入<code>google/protobuf/any.proto</code>。</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;google/protobuf/any.proto&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">ErrorStatus</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> message = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> google.protobuf.Any details = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Any类型用来替换proto2中的扩展。</p>\n<h3 id=\"使用其他消息类型\"><a href=\"#使用其他消息类型\" class=\"headerlink\" title=\"使用其他消息类型\"></a>使用其他消息类型</h3><p>你可以将其他消息类型用作字段类型。例如，假设在每一个SearchResponse消息中包含Result消息，此时可以在相同的.proto文件中定义一个Result消息类型，然后在SearchResponse消息中指定一个Result类型的字段，如：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SearchResponse</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> Result result = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Result</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">string</span> url = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">string</span> title = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> <span class=\"type\">string</span> snippets = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入定义\"><a href=\"#导入定义\" class=\"headerlink\" title=\"导入定义\"></a>导入定义</h3><p>在上面的例子中，Result消息类型与SearchResponse是定义在同一文件中的。如果想要使用的消息类型已经在其他.proto文件中已经定义过了呢？<br>你可以通过导入（importing）其他.proto文件中的定义来使用它们。要导入其他.proto文件的定义，你需要在你的文件中添加一个导入声明，如：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;myproject/other_protos.proto&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下你只能使用直接导入的.proto文件中的定义. 然而， 有时候你需要移动一个.proto文件到一个新的位置， 可以不直接移动.proto文件， 只需放入一个dummy .proto 文件在老的位置， 然后使用import转向新的位置:</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// new.proto</span></span><br><span class=\"line\"><span class=\"comment\">// All definitions are moved here</span></span><br><span class=\"line\"><span class=\"comment\">// old.proto</span></span><br><span class=\"line\"><span class=\"comment\">// This is the proto that all clients are importing.</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> public <span class=\"string\">&quot;new.proto&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;other.proto&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>// client.proto</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;old.proto&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// You use definitions from old.proto and new.proto, but not other.proto</span></span><br></pre></td></tr></table></figure>\n\n<p>protocol编译器就会在一系列目录中查找需要被导入的文件，这些目录通过protocol编译器的命令行参数-I/–import_path指定。如果不提供参数，编译器就在其调用目录下查找。</p>\n<h3 id=\"嵌套类型\"><a href=\"#嵌套类型\" class=\"headerlink\" title=\"嵌套类型\"></a>嵌套类型</h3><p>你可以在其他消息类型中定义、使用消息类型，在下面的例子中，Result消息就定义在SearchResponse消息内，如：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SearchResponse</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">Result</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"type\">string</span> url = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">optional</span> <span class=\"type\">string</span> title = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">repeated</span> <span class=\"type\">string</span> snippets = <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> Result result = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你想在它的父消息类型的外部重用这个消息类型，你需要以Parent.Type的形式使用它，如：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SomeOtherMessage</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> SearchResponse.Result result = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然，你也可以将消息嵌套任意多层，如：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Outer</span> &#123;                  <span class=\"comment\">// Level 0</span></span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">MiddleAA</span> &#123;  <span class=\"comment\">// Level 1</span></span><br><span class=\"line\">    <span class=\"keyword\">message </span><span class=\"title class_\">Inner</span> &#123;   <span class=\"comment\">// Level 2</span></span><br><span class=\"line\">      <span class=\"keyword\">required</span> <span class=\"type\">int64</span> ival = <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">optional</span> <span class=\"type\">bool</span>  booly = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">MiddleBB</span> &#123;  <span class=\"comment\">// Level 1</span></span><br><span class=\"line\">    <span class=\"keyword\">message </span><span class=\"title class_\">Inner</span> &#123;   <span class=\"comment\">// Level 2</span></span><br><span class=\"line\">      <span class=\"keyword\">required</span> <span class=\"type\">int32</span> ival = <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">optional</span> <span class=\"type\">bool</span>  booly = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更新一个消息类型\"><a href=\"#更新一个消息类型\" class=\"headerlink\" title=\"更新一个消息类型\"></a>更新一个消息类型</h3><p>==如果一个已有的消息格式已无法满足新的需求——如，要在消息中添加一个额外的字段——但是同时旧版本写的代码仍然可用。不用担心！更新消息而不破坏已有代码是非常简单的。在更新时只要记住以下的规则即可。==</p>\n<ul>\n<li>不要更改任何已有的字段的数值标识。<br>所添加的任何字段都必须是optional或repeated的。这就意味着任何使用“旧”的消息格式的代码序列化的消息可以被新的代码所解析，因为它们 不会丢掉任何required的元素。应该为这些元素设置合理的默认值，这样新的代码就能够正确地与老代码生成的消息交互了。类似地，新的代码创建的消息 也能被老的代码解析：老的二进制程序在解析的时候只是简单地将新字段忽略。然而，未知的字段是没有被抛弃的。此后，如果消息被序列化，未知的字段会随之一 起被序列化——所以，如果消息传到了新代码那里，则新的字段仍然可用。注意：对Python来说，对未知字段的保留策略是无效的。</li>\n<li>非required的字段可以移除——只要它们的标识号在新的消息类型中不再使用（更好的做法可能是重命名那个字段，例如在字段前添加“OBSOLETE_”前缀，那样的话，使用的.proto文件的用户将来就不会无意中重新使用了那些不该使用的标识号）。</li>\n<li>一个非required的字段可以转换为一个扩展，反之亦然——只要它的类型和标识号保持不变。</li>\n<li>int32, uint32, int64, uint64,和bool是全部兼容的，这意味着可以将这些类型中的一个转换为另外一个，而不会破坏向前、 向后的兼容性。如果解析出来的数字与对应的类型不相符，那么结果就像在C++中对它进行了强制类型转换一样（例如，如果把一个64位数字当作int32来 读取，那么它就会被截断为32位的数字）。</li>\n<li>sint32和sint64是互相兼容的，但是它们与其他整数类型不兼容。</li>\n<li>string和bytes是兼容的——只要bytes是有效的UTF-8编码。</li>\n<li>嵌套消息与bytes是兼容的——只要bytes包含该消息的一个编码过的版本。</li>\n<li>fixed32与sfixed32是兼容的，fixed64与sfixed64是兼容的。</li>\n</ul>\n<h2 id=\"proto文件编译\"><a href=\"#proto文件编译\" class=\"headerlink\" title=\"proto文件编译\"></a>proto文件编译</h2><p>将.proto文件，编译成指定语言类库</p>\n<h3 id=\"安装Protobuf编译器\"><a href=\"#安装Protobuf编译器\" class=\"headerlink\" title=\"安装Protobuf编译器\"></a>安装Protobuf编译器</h3><p>protobuf的github发布地址： <a href=\"https://github.com/protocolbuffers/protobuf/releases\">https://github.com/protocolbuffers/protobuf/releases</a></p>\n<p>protobuf的编译器叫protoc，在上面的网址中找到最新版本的安装包，下载安装。</p>\n<ol>\n<li><code>unzip protoc-****-osx-x86_64.zip</code></li>\n<li><code>cp -r include/ /usr/local/include/  # 一个&quot;/&quot;都不能少</code></li>\n<li><code>cp -r bin/ /usr/local/bin/  # 一个&quot;/&quot;都不能少</code></li>\n</ol>\n<p>打开cmd，命令窗口执行protoc命令，没有报错的话，就已经安装成功。</p>\n<h3 id=\"安装protoc-gen-go插件\"><a href=\"#安装protoc-gen-go插件\" class=\"headerlink\" title=\"安装protoc-gen-go插件\"></a>安装protoc-gen-go插件</h3><p>Protobuf核心的工具集是C++语言开发的，官方的protoc编译器中并不支持Go语言，需要安装一个插件才能生成Go代码。用如下命令安装：</p>\n<p><code>go get -u -v github.com/golang/protobuf/protoc-gen-go@v1.3.0 // 指定protoc-gen-go的版本</code></p>\n<p>提供了一个<code>protoc-gen-go</code>二进制文件，当编译器调用时传递了<code>--go_out</code>命令行标志时<code>protoc</code>就会使用它。<code>--go_out</code>告诉编译器把Go源代码写到哪里。编译器会为每个<code>.proto</code>文件生成一个单独的源代码文件。</p>\n<h3 id=\"编译对应语言的pb文件\"><a href=\"#编译对应语言的pb文件\" class=\"headerlink\" title=\"编译对应语言的pb文件\"></a>编译对应语言的pb文件</h3><p>在当前的目录下执行<code>protoc -I=. -I/usr/local/include -I=$(GOPATH)/src --go_out=. simple.proto</code>, 可以将这个proto编译成Go的代码，因为这里我们使用了<code>go_out</code>输出格式。</p>\n<p><code>-I</code>指定protoc的搜索import的proto的文件夹。在<code>MacOS</code>操作系统中protobuf把一些扩展的proto放在了<code>/usr/local/include</code>对应的文件夹中，一些第三方的Go库放在了gopath对应的包下，所以这里都把它们加上了。对于这个简单的例子，实际是不需要的。</p>\n<p><code>cpp_out</code>用来生成C++代码，<code>java_out</code>产生Java代码，<code>python_out</code>产生python代码，类似地还有<code>csharp_out</code>、<code>objc_out</code>、<code>ruby_out</code>、<code>php_out</code>等参数。</p>\n<p>一些第三方的插件也会定义自己的输出插件，比如<code>gofast_out</code>使用gogo库生成代码， <code>rust_out</code>产生rust代码。</p>\n<p>生成的代码我们指定放在本地文件夹中(<code>--go_out=.</code>)。</p>\n<p>输出文件的名称是通过获取.proto文件的名称并进行两处更改来计算的：</p>\n<ul>\n<li>生成文件的扩展名是<code>.pb.go</code>。比如说<code>user.proto</code>编译后会得到<code>user.pb.go</code>。</li>\n<li>proto路径（使用<code>--proto_path</code>或<code>-I</code>命令行标志指定）将替换为输出路径（使用<code>--go_out</code>标志指定）。</li>\n</ul>\n<p>当你运行如下编译命令时：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc --proto_path=src --go_out=build/gen src/foo.proto src/bar/baz.proto</span><br></pre></td></tr></table></figure>\n\n<p>编译器会读取文件<code>src/foo.proto</code>和<code>src/bar/baz.proto</code>，这将会生成两个输出文件<code>build/gen/foo.pb.go</code>和<code>build/gen/bar/baz.pb.go</code></p>\n<p>如果有必要，编译器会自动生成<code>build/gen/bar</code>目录，但是他不能创建<code>build</code>或者<code>build/gen</code>目录，这两个必须是已经存在的目录。</p>\n<h3 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h3><p>如果一个<code>.proto</code>文件中有包声明，生成的源代码将会使用它来作为Go的包名，如果<code>.proto</code>的包名中有<code>.</code> 在Go包名中会将<code>.</code>转换为<code>_</code>。举例来说<code>proto</code>包名<code>example.high_score</code>将会生成Go包名<code>example_high_score</code>。</p>\n<p>在<code>.proto</code>文件中可以使用option <code>go_package</code>指令来覆盖上面默认生成Go包名的规则。比如说包含如下指令的一个<code>.proto</code>文件</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.high_score;</span><br><span class=\"line\"><span class=\"keyword\">option</span> go_package = <span class=\"string\">&quot;hs&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>生成的Go源代码的包名是<code>hs</code>。</p>\n<p>如果一个<code>.proto</code>文件中不包含package声明，生成的源代码将会使用<code>.proto</code>文件的文件名(去掉扩展名)作为Go包名，<code>.</code>会被首先转换为<code>_</code>。举例来说一个名为<code>high.score.proto</code>不包含pack声明的文件将会生成文件<code>high.score.pb.go</code>，他的Go包名是<code>high_score</code>。</p>\n<h3 id=\"消息\"><a href=\"#消息\" class=\"headerlink\" title=\"消息\"></a>消息</h3><p>一个简单的消息声明：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Foo</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>protocol buffer编译器将会生成一个名为<code>Foo</code>的结构体，实现了<code>proto.Message</code>接口的<code>Foo</code>类型的指针</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Foo struct &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重置proto为默认值</span></span><br><span class=\"line\">func (m *Foo) Reset()         &#123; *m = Foo&#123;&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// String 返回proto的字符串表示</span></span><br><span class=\"line\">func (m *Foo) String() <span class=\"type\">string</span> &#123; return proto.CompactTextString(m) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ProtoMessage作为一个tag 确保其他人不会意外的实现</span></span><br><span class=\"line\"><span class=\"comment\">// proto.Message 接口.</span></span><br><span class=\"line\">func (*Foo) ProtoMessage()    &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内嵌的消息\"><a href=\"#内嵌的消息\" class=\"headerlink\" title=\"内嵌的消息\"></a>内嵌的消息</h3><p>一个message可以声明在其他message的内部。比如说：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">Bar</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种情况，编译器会生成两个结构体：<code>Foo</code>和<code>Foo_Bar</code>。</p>\n<h3 id=\"字段\"><a href=\"#字段\" class=\"headerlink\" title=\"字段\"></a>字段</h3><p>编译器会为每个在message中定义的字段生成一个Go结构体的字段，字段的确切性质取决于它的类型以及它是<code>singular</code>，<code>repeated</code>，<code>map</code>还是<code>oneof</code>字段。</p>\n<p>注意生成的Go结构体的字段将始终使用驼峰命名，即使在<code>.proto</code>文件中消息字段用的是小写加下划线（应该这样）。大小写转换的原理如下：</p>\n<ul>\n<li>首字母会大些，如果message中字段的第一个字符是<code>_</code>，它将被替换为X。</li>\n<li>如果内部下划线后跟小写字母，则删除下划线，并将后面跟随的字母大写。</li>\n</ul>\n<p>因此，proto字段<code>foo_bar_baz</code>在Go中变成<code>FooBarBaz</code>， <code>_my_field_name_2</code>变为<code>XMyFieldName_2</code>。</p>\n<h3 id=\"单一标量字段\"><a href=\"#单一标量字段\" class=\"headerlink\" title=\"单一标量字段\"></a>单一标量字段</h3><p>对于字段定义：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int32</span> foo = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>编译器将生成一个带有名为Foo的int32字段和一个访问器方法GetFoo（）的结构，该方法返回Foo中的int32值或该字段的零值（如果字段未设置（数值型零值为0，字符串为空字符串））。</p>\n<h3 id=\"单一message字段\"><a href=\"#单一message字段\" class=\"headerlink\" title=\"单一message字段\"></a>单一message字段</h3><p>给出如下消息类型</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Bar</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于一个有<code>Bar</code>类型字段的消息：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// proto3</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Baz</span> &#123;</span><br><span class=\"line\">  Bar foo = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译器将会生成一个Go结构体</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Baz <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        Foo *Bar</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>消息类型的字段可以设置为nil，这意味着该字段未设置，有效清除该字段。这不等同于将值设置为消息结构体的“空”实例。</p>\n<p>编译器还生成一个<code>func（m * Baz）GetFoo（）* Bar</code>辅助函数。这让不在中间检查nil值进行链式调用成为可能。</p>\n<h3 id=\"可重复字段\"><a href=\"#可重复字段\" class=\"headerlink\" title=\"可重复字段\"></a>可重复字段</h3><p>每个重复的字段在Go中的结构中生成一个T类型的slice，其中T是字段的元素类型。对于带有重复字段的此消息：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Baz</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> Bar foo = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译器会生成如下结构体：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Baz <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        Foo  []*Bar</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样，对于字段定义<code>repeated bytes foo = 1;</code>编译器将会生成一个带有类型为<code>[][]byte</code>名为<code>Foo</code>的字段的Go结构体。对于可重复的枚举<code>repeated MyEnum bar = 2;</code>，编译器会生成带有类型为<code>[]MyEnum</code>名为<code>Bar</code>的字段的Go结构体。</p>\n<h3 id=\"映射字段\"><a href=\"#映射字段\" class=\"headerlink\" title=\"映射字段\"></a>映射字段</h3><p>每个映射字段会在Go的结构体中生成一个<code>map[TKey]TValue</code>类型的字段，其中<code>TKey</code>是字段的键类型<code>TValue</code>是字段的值类型。对于下面这个消息定义：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Bar</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Baz</span> &#123;</span><br><span class=\"line\">  map&lt;<span class=\"type\">string</span>, Bar&gt; foo = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译器生成Go结构体</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Baz <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        Foo <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]*Bar</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"枚举-1\"><a href=\"#枚举-1\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>给出如下枚举</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SearchRequest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">enum </span><span class=\"title class_\">Corpus</span> &#123;</span><br><span class=\"line\">    UNIVERSAL = <span class=\"number\">0</span>;</span><br><span class=\"line\">    WEB = <span class=\"number\">1</span>;</span><br><span class=\"line\">    IMAGES = <span class=\"number\">2</span>;</span><br><span class=\"line\">    LOCAL = <span class=\"number\">3</span>;</span><br><span class=\"line\">    NEWS = <span class=\"number\">4</span>;</span><br><span class=\"line\">    PRODUCTS = <span class=\"number\">5</span>;</span><br><span class=\"line\">    VIDEO = <span class=\"number\">6</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Corpus corpus = <span class=\"number\">1</span>;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译器将会生成一个枚举类型和一系列该类型的常量。</p>\n<p>对于消息中的枚举（像上面那样），类型名字以消息名开头</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> SearchRequest_Corpus <span class=\"type\">int32</span></span><br></pre></td></tr></table></figure>\n\n<p>对于包级别的枚举：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .proto</span></span><br><span class=\"line\"><span class=\"keyword\">enum </span><span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  DEFAULT_BAR = <span class=\"number\">0</span>;</span><br><span class=\"line\">  BAR_BELLS = <span class=\"number\">1</span>;</span><br><span class=\"line\">  BAR_B_CUE = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Go 中的类型不会对proto中的枚举名称进行修改：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Foo <span class=\"type\">int32</span></span><br></pre></td></tr></table></figure>\n\n<p>此类型具有<code>String()</code>方法，该方法返回给定值的名称。</p>\n<p><code>Enum()</code>方法使用给定值初始化新分配的内存并返回相应的指针：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(Foo)</span></span> Enum() *Foo</span><br></pre></td></tr></table></figure>\n\n<p>编译器为枚举中的每个值生成一个常量。对于消息中的枚举，常量以消息的名称开头：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">        SearchRequest_UNIVERSAL SearchRequest_Corpus = <span class=\"number\">0</span></span><br><span class=\"line\">        SearchRequest_WEB       SearchRequest_Corpus = <span class=\"number\">1</span></span><br><span class=\"line\">        SearchRequest_IMAGES    SearchRequest_Corpus = <span class=\"number\">2</span></span><br><span class=\"line\">        SearchRequest_LOCAL     SearchRequest_Corpus = <span class=\"number\">3</span></span><br><span class=\"line\">        SearchRequest_NEWS      SearchRequest_Corpus = <span class=\"number\">4</span></span><br><span class=\"line\">        SearchRequest_PRODUCTS  SearchRequest_Corpus = <span class=\"number\">5</span></span><br><span class=\"line\">        SearchRequest_VIDEO     SearchRequest_Corpus = <span class=\"number\">6</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>对于包级别的枚举，常量以枚举名称开头:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">        Foo_DEFAULT_BAR Foo = <span class=\"number\">0</span></span><br><span class=\"line\">        Foo_BAR_BELLS   Foo = <span class=\"number\">1</span></span><br><span class=\"line\">        Foo_BAR_B_CUE   Foo = <span class=\"number\">2</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>protobuf编译器还生成从整数值到字符串名称的映射以及从名称到值的映射：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Foo_name = <span class=\"keyword\">map</span>[<span class=\"type\">int32</span>]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">        <span class=\"number\">0</span>: <span class=\"string\">&quot;DEFAULT_BAR&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">1</span>: <span class=\"string\">&quot;BAR_BELLS&quot;</span>,</span><br><span class=\"line\">        <span class=\"number\">2</span>: <span class=\"string\">&quot;BAR_B_CUE&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Foo_value = <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int32</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;DEFAULT_BAR&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;BAR_BELLS&quot;</span>:   <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;BAR_B_CUE&quot;</span>:   <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请注意，<code>.proto</code>语言允许多个枚举符号具有相同的数值。具有相同数值的符号是同义词。这些在Go中以完全相同的方式表示，多个名称对应于相同的数值。反向映射包含数字值的单个条目，数值映射到出现在<code>proto</code>文件中首先出现的名称。</p>\n"},{"title":"Hello World","abbrlink":"4a17b156","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n<!--more-->\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\nabbrlink: 4a17b156\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n<!--more-->\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-03-06T10:58:13.000Z","updated":"2021-03-06T10:58:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl707w38m000431c904bt1oue","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"length":367,"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>","more":"<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl707w38g000131c9gfutfj0j","tag_id":"cl707w38l000331c9dvug3jfn","_id":"cl707w38o000631c9182i19wn"},{"post_id":"cl707w38j000231c90o1r7o5a","tag_id":"cl707w38n000531c9exep6bsa","_id":"cl707w38o000731c96iifezdd"}],"Tag":[{"name":"Go","_id":"cl707w38l000331c9dvug3jfn"},{"name":"Protobuf","_id":"cl707w38n000531c9exep6bsa"}]}}